{
  "editor.autoClosingBrackets": "beforeWhitespace",
  "editor.autoClosingQuotes": "beforeWhitespace",
  "editor.fontFamily": "'Ubuntu Mono',  'Courier New', Arialweight",
  "editor.fontLigatures": true,
  "editor.fontSize": 28,
  "editor.fontWeight": "400",
  "editor.formatOnPaste": true,
  "editor.formatOnSave": true,
  "editor.formatOnType": false,
  "editor.insertSpaces": false,
  "editor.lineHeight": 50,
  "editor.minimap.enabled": false,
  "editor.mouseWheelZoom": true,
  "editor.renderControlCharacters": false,
  "editor.renderWhitespace": "none",
  "editor.suggest.localityBonus": true,
  "editor.tabCompletion": "on",
  "editor.wordBasedSuggestions": true,
  "editor.wordWrap": "on",
  "editor.wrappingIndent": "deepIndent",
  "emmet.triggerExpansionOnTab": true,
  "files.autoSave": "afterDelay",
  "guides.active.expandBrackets": false,
  "guides.active.extraIndent": true,
  "guides.active.gutter": true,
  "guides.active.hideOnSelection": false,
  "guides.active.style": "dotted",
  "guides.active.width": 1.5,
  "guides.normal.hideOnSelection": false,
  "guides.normal.width": 2,
  "guides.overrideDefault": true,
  "guides.sendUsagesAndStats": false,
  "guides.stack.hideOnSelection": false,
  "guides.stack.style": "dotted",
  "guides.stack.width": 1.5,
  "html.format.endWithNewline": true,
  "markdown-preview-enhanced.breakOnSingleNewLine": false,
  "markdown.preview.breaks": true,
  "markdown.preview.doubleClickToSwitchToEditor": false,
  "markdown.preview.fontFamily": "'Century Gothic', BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'HelveticaNeue-Light', 'Ubuntu', 'Droid Sans', sans-serif",
  "markdown.preview.fontSize": 18,
  "markdown.preview.lineHeight": 1.5,
  "materialTheme.accent": "Yellow",
  "npm.fetchOnlinePackageInfo": false,
  "prettier.arrowParens": "always",
  "prettier.singleQuote": true,
  "prettier.tabWidth": 4,
  "python.autoComplete.addBrackets": true,
  "python.formatting.provider": "autopep8",
  "python.linting.enabled": true,
  "python.pythonPath": "C:\\ProgramData\\Anaconda3",
  "search.location": "panel",
  "terminal.integrated.fontFamily": "Consolas",
  "terminal.integrated.fontSize": 16,
  "terminal.integrated.lineHeight": 0,
  "terminal.integrated.shell.windows": "C:\\WINDOWS\\System32\\cmd.exe",
  "vsintellicode.python.completionsEnabled": false,
  "window.titleBarStyle": "native",
  "window.zoomLevel": 0,
  "workbench.activityBar.visible": false,
  "workbench.colorCustomizations": {
    "activityBarBadge.background": "#FFA000",
    "breadcrumb.activeSelectionForeground": "#FFA000",
    "editorSuggestWidget.highlightForeground": "#FFA000",
    "editorWidget.border": "#FFA000",
    "editorWidget.resizeBorder": "#FFA000",
    "list.activeSelectionForeground": "#FFA000",
    "list.highlightForeground": "#FFA000",
    "list.inactiveSelectionForeground": "#FFA000",
    "menu.selectionForeground": "#FFA000",
    "menubar.selectionForeground": "#FFA000",
    "notificationLink.foreground": "#FFA000",
    "panelTitle.activeBorder": "#FFA000",
    "pickerGroup.foreground": "#FFA000",
    "progressBar.background": "#FFA000",
    "scrollbarSlider.activeBackground": "#FFA00050",
    "settings.headerForeground": "#FFA000",
    "settings.modifiedItemIndicator": "#FFA000",
    "tab.activeBorder": "#FFA000",
    "textLink.foreground": "#FFA000",
    "workbench.editor.tabSizing": "shrink",
    "workbench.sideBar.location": "left",
    "zenMode.fullScreen": false,
    "zenMode.hideActivityBar": false,
    "zenMode.hideStatusBar": false,
    "zenMode.hideTabs": false,
    "breadcrumbs.enabled": false,
    "javascript.implicitProjectConfig.checkJs": true,
    "liveServer.settings.donotShowInfoMsg": true,
    "markdown-preview-enhanced.enableScriptExecution": true,
    "editor.matchBrackets": true,
    "editor.renderLineHighlight": "all",
    "workbench.colorTheme": "JSFiddle-like-syntax-vscode",
    "editor.acceptSuggestionOnEnter": "off",
    "python.terminal.executeInFileDir": true,
    "terminal.integrated.rendererType": "dom",
    "window.menuBarVisibility": "toggle",
    "workbench.statusBar.feedback.visible": false,
    "explorer.confirmDelete": false,
    "[html]": {},
    "editor.occurrencesHighlight": false,
    "editor.selectionHighlight": false,
    "explorer.confirmDragAndDrop": false,
    "liveServer.settings.donotVerifyTags": true,
    "editor.tabSize": 2,
    "workbench.iconTheme": "eq-material-theme-icons",
    // Controls auto save of dirty files. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
    //  - off: A dirty file is never automatically saved.
    //  - afterDelay: A dirty file is automatically saved after the configured `files.autoSaveDelay`.
    //  - onFocusChange: A dirty file is automatically saved when the editor loses focus.
    //  - onWindowChange: A dirty file is automatically saved when the window loses focus.
    "files.autoSave": "off",

    // Controls the font size in pixels.
    "editor.fontSize": 14,

    // Controls the font family.
    "editor.fontFamily": "Consolas, 'Courier New', monospace",

    // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.tabSize": 4,

    // Controls how the editor should render whitespace characters.
    //  - none
    //  - boundary: Render whitespace characters except for single spaces between words.
    //  - all
    "editor.renderWhitespace": "none",

    // Controls the cursor style.
    "editor.cursorStyle": "line",

    // The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "editor.multiCursorModifier": "alt",

    // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.insertSpaces": true,

    // Controls how lines should wrap.
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
    //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
    "editor.wordWrap": "off",

    // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "files.exclude": {
      "**/.git": true,
      "**/.svn": true,
      "**/.hg": true,
      "**/CVS": true,
      "**/.DS_Store": true
    }
  },


  // Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
  {
    "files.associations": {}

  },
  {


    // Controls whether the diff editor shows changes in leading or trailing whitespace as diffs.
    "diffEditor.ignoreTrimWhitespace": true,

    // Controls whether the diff editor shows +/- indicators for added/removed changes.
    "diffEditor.renderIndicators": true,

    // Controls whether the diff editor shows the diff side by side or inline.
    "diffEditor.renderSideBySide": true,

    // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
    "editor.acceptSuggestionOnCommitCharacter": true,

    // Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
    //  - on
    //  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
    //  - off
    "editor.acceptSuggestionOnEnter": "on",

    // Controls whether the editor should run in a mode where it is optimized for screen readers.
    //  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
    //  - on: The editor will be permanently optimized for usage with a Screen Reader.
    //  - off: The editor will never be optimized for usage with a Screen Reader.
    "editor.accessibilitySupport": "auto",

    // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
    //  - always
    //  - languageDefined: Use language configurations to determine when to autoclose brackets.
    //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
    //  - never
    "editor.autoClosingBrackets": "languageDefined",

    // Controls whether the editor should automatically close quotes after the user adds an opening quote.
    //  - always
    //  - languageDefined: Use language configurations to determine when to autoclose quotes.
    //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
    //  - never
    "editor.autoClosingQuotes": "languageDefined",

    // Controls whether the editor should automatically adjust the indentation when users type, paste or move lines. Extensions with indentation rules of the language must be available.
    "editor.autoIndent": true,

    // Controls whether the editor should automatically surround selections.
    //  - languageDefined: Use language configurations to determine when to automatically surround selections.
    //  - brackets: Surround with brackets but not quotes.
    //  - quotes: Surround with quotes but not brackets.
    //  - never
    "editor.autoSurround": "languageDefined",

    // Code action kinds to be run on save.
    "editor.codeActionsOnSave": {},

    // Timeout in milliseconds after which the code actions that are run on save are cancelled.
    "editor.codeActionsOnSaveTimeout": 750,

    // Controls whether the editor shows CodeLens
    "editor.codeLens": true,

    // Controls whether the editor should render the inline color decorators and color picker.
    "editor.colorDecorators": true,

    // Controls whether syntax highlighting should be copied into the clipboard.
    "editor.copyWithSyntaxHighlighting": true,

    // Control the cursor animation style.
    "editor.cursorBlinking": "blink",

    // Controls whether the smooth caret animation should be enabled.
    "editor.cursorSmoothCaretAnimation": false,

    // Controls the cursor style.
    "editor.cursorStyle": "line",

    // Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
    "editor.cursorWidth": 0,

    // Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
    "editor.detectIndentation": true,

    // Controls whether the editor should allow moving selections via drag and drop.
    "editor.dragAndDrop": true,

    // Controls whether copying without a selection copies the current line.
    "editor.emptySelectionClipboard": true,

    // Controls whether the find operation is carried out on selected text or the entire file in the editor.
    "editor.find.autoFindInSelection": false,

    // Controls whether the search string in the Find Widget is seeded from the editor selection.
    "editor.find.seedSearchStringFromSelection": true,

    // Controls whether the editor has code folding enabled
    "editor.folding": true,

    // Controls the strategy for computing folding ranges. `auto` uses a language specific folding strategy, if available. `indentation` uses the indentation based folding strategy.
    "editor.foldingStrategy": "auto",

    // Controls the font family.
    "editor.fontFamily": "Consolas, 'Courier New', monospace",

    // Enables/Disables font ligatures.
    "editor.fontLigatures": false,

    // Controls the font size in pixels.
    "editor.fontSize": 14,

    // Controls the font weight.
    "editor.fontWeight": "normal",

    // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
    "editor.formatOnPaste": false,

    // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
    "editor.formatOnSave": false,

    // Timeout in milliseconds after which the formatting that is run on file save is cancelled.
    "editor.formatOnSaveTimeout": 750,

    // Controls whether the editor should automatically format the line after typing.
    "editor.formatOnType": false,

    // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
    "editor.glyphMargin": true,

    // Controls whether the cursor should be hidden in the overview ruler.
    "editor.hideCursorInOverviewRuler": false,

    // Controls whether the editor should highlight the active indent guide.
    "editor.highlightActiveIndentGuide": true,

    // Controls the delay in milliseconds after which the hover is shown.
    "editor.hover.delay": 300,

    // Controls whether the hover is shown.
    "editor.hover.enabled": true,

    // Controls whether the hover should remain visible when mouse is moved over it.
    "editor.hover.sticky": true,

    // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.insertSpaces": true,

    // Special handling for large files to disable certain memory intensive features.
    "editor.largeFileOptimizations": true,

    // Controls the letter spacing in pixels.
    "editor.letterSpacing": 0,

    // Enables the code action lightbulb in the editor.
    "editor.lightbulb.enabled": true,

    // Controls the line height. Use 0 to compute the line height from the font size.
    "editor.lineHeight": 0,

    // Controls the display of line numbers.
    //  - off: Line numbers are not rendered.
    //  - on: Line numbers are rendered as absolute number.
    //  - relative: Line numbers are rendered as distance in lines to cursor position.
    //  - interval: Line numbers are rendered every 10 lines.
    "editor.lineNumbers": "on",

    // Controls whether the editor should detect links and make them clickable.
    "editor.links": true,

    // Highlight matching brackets when one of them is selected.
    "editor.matchBrackets": true,

    // Controls whether the minimap is shown.
    "editor.minimap.enabled": true,

    // Limit the width of the minimap to render at most a certain number of columns.
    "editor.minimap.maxColumn": 120,

    // Render the actual characters on a line as opposed to color blocks.
    "editor.minimap.renderCharacters": true,

    // Controls whether the minimap slider is automatically hidden.
    "editor.minimap.showSlider": "mouseover",

    // Controls the side where to render the minimap.
    "editor.minimap.side": "right",

    // A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
    "editor.mouseWheelScrollSensitivity": 1,

    // Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
    "editor.mouseWheelZoom": false,

    // Merge multiple cursors when they are overlapping.
    "editor.multiCursorMergeOverlapping": true,

    // The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "editor.multiCursorModifier": "alt",

    // Controls whether the editor should highlight semantic symbol occurrences.
    "editor.occurrencesHighlight": true,

    // Controls whether a border should be drawn around the overview ruler.
    "editor.overviewRulerBorder": true,

    // Controls the number of decorations that can show up at the same position in the overview ruler.
    "editor.overviewRulerLanes": 3,

    // Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
    "editor.parameterHints.cycle": false,

    // Enables a pop-up that shows parameter documentation and type information as you type.
    "editor.parameterHints.enabled": true,

    // Controls whether suggestions should automatically show up while typing.
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": false
    },

    // Controls the delay in milliseconds after which quick suggestions will show up.
    "editor.quickSuggestionsDelay": 10,

    // Controls whether the editor should render control characters.
    "editor.renderControlCharacters": false,

    // Controls whether the editor should render indent guides.
    "editor.renderIndentGuides": true,

    // Controls how the editor should render the current line highlight.
    //  - none
    //  - gutter
    //  - line
    //  - all: Highlights both the gutter and the current line.
    "editor.renderLineHighlight": "line",

    // Controls how the editor should render whitespace characters.
    //  - none
    //  - boundary: Render whitespace characters except for single spaces between words.
    //  - all
    "editor.renderWhitespace": "none",

    // Controls whether selections should have rounded corners.
    "editor.roundedSelection": true,

    // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
    "editor.rulers": [],

    // Controls the number of extra characters beyond which the editor will scroll horizontally.
    "editor.scrollBeyondLastColumn": 5,

    // Controls whether the editor will scroll beyond the last line.
    "editor.scrollBeyondLastLine": true,

    // Controls whether the editor should highlight matches similar to the selection
    "editor.selectionHighlight": true,

    // Controls whether the fold controls on the gutter are automatically hidden.
    "editor.showFoldingControls": "mouseover",

    // Controls fading out of unused code.
    "editor.showUnused": true,

    // Controls whether the editor will scroll using an animation.
    "editor.smoothScrolling": false,

    // Controls whether snippets are shown with other suggestions and how they are sorted.
    //  - top: Show snippet suggestions on top of other suggestions.
    //  - bottom: Show snippet suggestions below other suggestions.
    //  - inline: Show snippets suggestions with other suggestions.
    //  - none: Do not show snippet suggestions.
    "editor.snippetSuggestions": "inline",

    // Keep peek editors open even when double clicking their content or when hitting `Escape`.
    "editor.stablePeek": false,

    // Controls whether filtering and sorting suggestions accounts for small typos.
    "editor.suggest.filterGraceful": true,

    // Controls whether sorting favours words that appear close to the cursor.
    "editor.suggest.localityBonus": false,

    // Control whether an active snippet prevents quick suggestions.
    "editor.suggest.snippetsPreventQuickSuggestions": true,

    // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
    "editor.suggestFontSize": 0,

    // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used.
    "editor.suggestLineHeight": 0,

    // Controls whether suggestions should automatically show up when typing trigger characters.
    "editor.suggestOnTriggerCharacters": true,

    // Controls how suggestions are pre-selected when showing the suggest list.
    //  - first: Always select the first suggestion.
    //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
    //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
    "editor.suggestSelection": "recentlyUsed",

    // Enables tab completions.
    //  - on: Tab complete will insert the best matching suggestion when pressing tab.
    //  - off: Disable tab completions.
    //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
    "editor.tabCompletion": "off",

    // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.tabSize": 4,

    // Overrides editor colors and font style from the currently selected color theme.
    "editor.tokenColorCustomizations": {},

    // Remove trailing auto inserted whitespace.
    "editor.trimAutoWhitespace": true,

    // Inserting and deleting whitespace follows tab stops.
    "editor.useTabStops": true,

    // Controls whether completions should be computed based on words in the document.
    "editor.wordBasedSuggestions": true,

    // Characters that will be used as word separators when doing word related navigations or operations.
    "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

    // Controls how lines should wrap.
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
    //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
    "editor.wordWrap": "off",

    // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
    "editor.wordWrapColumn": 80,

    // Controls the indentation of wrapped lines.
    //  - none: No indentation. Wrapped lines begin at column 1.
    //  - same: Wrapped lines get the same indentation as the parent.
    //  - indent: Wrapped lines get +1 indentation toward the parent.
    //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
    "editor.wrappingIndent": "same"

  },
  {


    // Controls whether inline actions are always visible in the Source Control view.
    "scm.alwaysShowActions": false,

    // Controls whether to always show the Source Control Provider section.
    "scm.alwaysShowProviders": false,

    // Controls diff decorations in the editor.
    "scm.diffDecorations": "all",

    // Controls the width(px) of diff decorations in gutter (added & modified).
    "scm.diffDecorationsGutterWidth": 3

  },
  {


    // Controls the visibility of the activity bar in the workbench.
    "workbench.activityBar.visible": true,

    // Overrides colors from the currently selected color theme.
    "workbench.colorCustomizations": {},

    // Specifies the color theme used in the workbench.
    "workbench.colorTheme": "Default Dark+",

    // Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
    "workbench.commandPalette.history": 50,

    // Controls whether the last typed input to the command palette should be restored when opening it the next time.
    "workbench.commandPalette.preserveInput": false,

    // Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
    "workbench.editor.centeredLayoutAutoResize": true,

    // Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
    "workbench.editor.closeEmptyGroups": true,

    // Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.
    "workbench.editor.closeOnFileDelete": false,

    // Controls whether opened editors show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing) and show up with an italic font style.
    "workbench.editor.enablePreview": true,

    // Controls whether opened editors from Quick Open show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing).
    "workbench.editor.enablePreviewFromQuickOpen": true,

    // Controls whether a top border is drawn on modified (dirty) editor tabs or not.
    "workbench.editor.highlightModifiedTabs": false,

    // Controls the format of the label for an editor.
    //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
    //  - short: Show the name of the file followed by its directory name.
    //  - medium: Show the name of the file followed by its path relative to the workspace folder.
    //  - long: Show the name of the file followed by its absolute path.
    "workbench.editor.labelFormat": "default",

    // Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
    "workbench.editor.openPositioning": "right",

    // Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
    "workbench.editor.openSideBySideDirection": "right",

    // Restores the last view state (e.g. scroll position) when re-opening files after they have been closed.
    "workbench.editor.restoreViewState": true,

    // Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
    "workbench.editor.revealIfOpen": false,

    // Controls whether opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
    "workbench.editor.showIcons": true,

    // Controls whether opened editors should show in tabs or not.
    "workbench.editor.showTabs": true,

    // Controls the position of the editor's tabs close buttons, or disables them when set to 'off'.
    "workbench.editor.tabCloseButton": "right",

    // Controls the sizing of editor tabs.
    //  - fit: Always keep tabs large enough to show the full editor label.
    //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
    "workbench.editor.tabSizing": "fit",

    // Fetches experiments to run from a Microsoft online service.
    "workbench.enableExperiments": true,

    // Switches back to the previous storage implementation. Only change this setting if advised to do so.
    "workbench.enableLegacyStorage": false,

    // Specifies the icon theme used in the workbench or 'null' to not show any file icons.
    //  - null: No file icons
    //  - vs-minimal
    //  - vs-seti
    //  - eq-material-theme-icons
    //  - eq-material-theme-icons-darker
    //  - eq-material-theme-icons-palenight
    //  - eq-material-theme-icons-ocean
    //  - eq-material-theme-icons-light
    //  - material-icon-theme
    //  - vscode-icons
    "workbench.iconTheme": "vs-seti",

    // The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
    //  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
    //  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
    "workbench.list.multiSelectModifier": "ctrlCmd",

    // Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. 
    "workbench.list.openMode": "singleClick",

    // Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom or on the right of the workbench.
    "workbench.panel.defaultLocation": "bottom",

    // Controls whether Quick Open should close automatically once it loses focus.
    "workbench.quickOpen.closeOnFocusLost": true,

    // Controls whether the last typed input to Quick Open should be restored when opening it the next time.
    "workbench.quickOpen.preserveInput": false,

    // Determines which settings editor to use by default.
    //  - ui: Use the settings UI editor.
    //  - json: Use the JSON file editor.
    "workbench.settings.editor": "ui",

    // Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
    "workbench.settings.enableNaturalLanguageSearch": true,

    // Controls whether opening keybinding settings also opens an editor showing all default keybindings.
    "workbench.settings.openDefaultKeybindings": true,

    // Controls whether opening settings also opens an editor showing all default settings.
    "workbench.settings.openDefaultSettings": true,

    // Controls the behavior of the settings editor Table of Contents while searching.
    //  - hide: Hide the Table of Contents while searching.
    //  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
    "workbench.settings.settingsSearchTocBehavior": "filter",

    // Controls the location of the sidebar. It can either show on the left or right of the workbench.
    "workbench.sideBar.location": "left",

    // Controls which editor is shown at startup, if none are restored from the previous session.
    //  - none: Start without an editor.
    //  - welcomePage: Open the Welcome page (default).
    //  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise.
    //  - newUntitledFile: Open a new untitled file (only applies when opening an empty workspace).
    //  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
    "workbench.startupEditor": "welcomePage",

    // Controls the visibility of the Twitter feedback (smiley) in the status bar at the bottom of the workbench.
    "workbench.statusBar.feedback.visible": true,

    // Controls the visibility of the status bar at the bottom of the workbench.
    "workbench.statusBar.visible": true,

    // When enabled, will show the watermark tips when no editor is open.
    "workbench.tips.enabled": true,

    // Controls whether trees support horizontal scrolling in the workbench.
    "workbench.tree.horizontalScrolling": false,

    // Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
    "workbench.view.alwaysShowHeaderActions": false

  },
  {


    // If enabled, will automatically change to high contrast theme if Windows is using a high contrast theme, and to dark theme when switching away from a Windows high contrast theme.
    "window.autoDetectHighContrast": true,

    // Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
    "window.closeWhenEmpty": false,

    // If enabled, the main menus can be opened via Alt-key shortcuts. Disabling mnemonics allows to bind these Alt-key shortcuts to editor commands instead.
    "window.enableMenuBarMnemonics": true,

    // Control the visibility of the menu bar. A setting of 'toggle' means that the menu bar is hidden and a single press of the Alt key will show it. By default, the menu bar will be visible, unless the window is full screen.
    //  - default: Menu is only hidden in full screen mode.
    //  - visible: Menu is always visible even in full screen mode.
    //  - toggle: Menu is hidden but can be displayed via Alt key.
    //  - hidden: Menu is always hidden.
    "window.menuBarVisibility": "default",

    // Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
    //  - default: Open new windows in the center of the screen.
    //  - inherit: Open new windows with same dimension as last active one.
    //  - maximized: Open new windows maximized.
    //  - fullscreen: Open new windows in full screen mode.
    "window.newWindowDimensions": "default",

    // Controls whether files should open in a new window.
    // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
    //  - on: Files will open in a new window.
    //  - off: Files will open in the window with the files' folder open or the last active window.
    //  - default: Files will open in a new window unless picked from within the application (e.g. via the File menu).
    "window.openFilesInNewWindow": "off",

    // Controls whether folders should open in a new window or replace the last active window.
    // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
    //  - on: Folders will open in a new window.
    //  - off: Folders will replace the last active window.
    //  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
    "window.openFoldersInNewWindow": "default",

    // Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
    // Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
    //  - on: Open a new empty window.
    //  - off: Focus the last active running instance.
    "window.openWithoutArgumentsInNewWindow": "on",

    // Controls whether a window should restore to full screen mode if it was exited in full screen mode.
    "window.restoreFullscreen": false,

    // Controls how windows are being reopened after a restart.
    //  - all: Reopen all windows.
    //  - folders: Reopen all folders. Empty workspaces will not be restored.
    //  - one: Reopen the last active window.
    //  - none: Never reopen a window. Always start with an empty one.
    "window.restoreWindows": "one",

    // Enable this workaround if scrolling is no longer smooth after restoring a minimized VS Code window. This is a workaround for an issue (https://github.com/Microsoft/vscode/issues/13612) where scrolling starts to lag on devices with precision trackpads like the Surface devices from Microsoft. Enabling this workaround can result in a little bit of layout flickering after restoring the window from minimized state but is otherwise harmless.
    "window.smoothScrollingWorkaround": false,

    // Controls the window title based on the active editor. Variables are substituted based on the context:
    // - `${activeEditorShort}`: the file name (e.g. myFile.txt).
    // - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFile.txt).
    // - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myProject/myFolder/myFile.txt).
    // - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
    // - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
    // - `${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).
    // - `${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).
    // - `${appName}`: e.g. VS Code.
    // - `${dirty}`: a dirty indicator if the active editor is dirty.
    // - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
    "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

    // Adjust the appearance of the window title bar. Changes require a full restart to apply.
    "window.titleBarStyle": "custom",

    // Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
    "window.zoomLevel": 0

  },
  {


    // Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
    "files.associations": {},

    // When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language.
    "files.autoGuessEncoding": false,

    // Controls auto save of dirty files. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
    //  - off: A dirty file is never automatically saved.
    //  - afterDelay: A dirty file is automatically saved after the configured `files.autoSaveDelay`.
    //  - onFocusChange: A dirty file is automatically saved when the editor loses focus.
    //  - onWindowChange: A dirty file is automatically saved when the window loses focus.
    "files.autoSave": "off",

    // Controls the delay in ms after which a dirty file is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
    "files.autoSaveDelay": 1000,

    // The default language mode that is assigned to new files.
    "files.defaultLanguage": "",

    // Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
    "files.enableTrash": true,

    // The default character set encoding to use when reading and writing files. This setting can also be configured per language.
    //  - utf8: UTF-8
    //  - utf8bom: UTF-8 with BOM
    //  - utf16le: UTF-16 LE
    //  - utf16be: UTF-16 BE
    //  - windows1252: Western (Windows 1252)
    //  - iso88591: Western (ISO 8859-1)
    //  - iso88593: Western (ISO 8859-3)
    //  - iso885915: Western (ISO 8859-15)
    //  - macroman: Western (Mac Roman)
    //  - cp437: DOS (CP 437)
    //  - windows1256: Arabic (Windows 1256)
    //  - iso88596: Arabic (ISO 8859-6)
    //  - windows1257: Baltic (Windows 1257)
    //  - iso88594: Baltic (ISO 8859-4)
    //  - iso885914: Celtic (ISO 8859-14)
    //  - windows1250: Central European (Windows 1250)
    //  - iso88592: Central European (ISO 8859-2)
    //  - cp852: Central European (CP 852)
    //  - windows1251: Cyrillic (Windows 1251)
    //  - cp866: Cyrillic (CP 866)
    //  - iso88595: Cyrillic (ISO 8859-5)
    //  - koi8r: Cyrillic (KOI8-R)
    //  - koi8u: Cyrillic (KOI8-U)
    //  - iso885913: Estonian (ISO 8859-13)
    //  - windows1253: Greek (Windows 1253)
    //  - iso88597: Greek (ISO 8859-7)
    //  - windows1255: Hebrew (Windows 1255)
    //  - iso88598: Hebrew (ISO 8859-8)
    //  - iso885910: Nordic (ISO 8859-10)
    //  - iso885916: Romanian (ISO 8859-16)
    //  - windows1254: Turkish (Windows 1254)
    //  - iso88599: Turkish (ISO 8859-9)
    //  - windows1258: Vietnamese (Windows 1258)
    //  - gbk: Simplified Chinese (GBK)
    //  - gb18030: Simplified Chinese (GB18030)
    //  - cp950: Traditional Chinese (Big5)
    //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
    //  - shiftjis: Japanese (Shift JIS)
    //  - eucjp: Japanese (EUC-JP)
    //  - euckr: Korean (EUC-KR)
    //  - windows874: Thai (Windows 874)
    //  - iso885911: Latin/Thai (ISO 8859-11)
    //  - koi8ru: Cyrillic (KOI8-RU)
    //  - koi8t: Tajik (KOI8-T)
    //  - gb2312: Simplified Chinese (GB 2312)
    //  - cp865: Nordic DOS (CP 865)
    //  - cp850: Western European DOS (CP 850)
    "files.encoding": "utf8",

    // The default end of line character.
    //  - \n: LF
    //  - \r\n: CRLF
    //  - auto: Uses operating system specific end of line character.
    "files.eol": "auto",

    // Configure glob patterns for excluding files and folders. For example, the files explorer decides which files and folders to show or hide based on this setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "files.exclude": {
      "**/.git": true,
      "**/.svn": true,
      "**/.hg": true,
      "**/CVS": true,
      "**/.DS_Store": true
    },

    // Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
    //  - off: Disable hot exit.
    //  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows with backups will be restored upon next launch.
    //  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. To restore folder windows as they were before shutdown set `window.restoreWindows` to `all`.
    "files.hotExit": "onExit",

    // When enabled, insert a final new line at the end of the file when saving it.
    "files.insertFinalNewline": false,

    // Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
    "files.maxMemoryForLargeFilesMB": 4096,

    // When enabled, will trim all new lines after the final new line at the end of the file when saving it.
    "files.trimFinalNewlines": false,

    // When enabled, will trim trailing whitespace when saving a file.
    "files.trimTrailingWhitespace": false,

    // Use the new experimental file watcher.
    "files.useExperimentalFileWatcher": false,

    // Configure glob patterns of file paths to exclude from file watching. Patterns must match on absolute paths (i.e. prefix with ** or the full path to match properly). Changing this setting requires a restart. When you experience Code consuming lots of cpu time on startup, you can exclude large folders to reduce the initial load.
    "files.watcherExclude": {
      "**/.git/objects/**": true,
      "**/.git/subtree-cache/**": true,
      "**/node_modules/*/**": true
    }

  },
  {


    // Controls whether turning on Zen Mode also centers the layout.
    "zenMode.centerLayout": true,

    // Controls whether turning on Zen Mode also puts the workbench into full screen mode.
    "zenMode.fullScreen": true,

    // Controls whether turning on Zen Mode also hides the activity bar at the left of the workbench.
    "zenMode.hideActivityBar": true,

    // Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
    "zenMode.hideStatusBar": true,

    // Controls whether turning on Zen Mode also hides workbench tabs.
    "zenMode.hideTabs": true,

    // Controls whether a window should restore to zen mode if it was exited in zen mode.
    "zenMode.restore": false

  },
  {


    // Controls whether the explorer should automatically reveal and select files when opening them.
    "explorer.autoReveal": true,

    // Controls whether the explorer should ask for confirmation when deleting a file via the trash.
    "explorer.confirmDelete": true,

    // Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
    "explorer.confirmDragAndDrop": true,

    // Controls whether file decorations should use badges.
    "explorer.decorations.badges": true,

    // Controls whether file decorations should use colors.
    "explorer.decorations.colors": true,

    // Controls whether the explorer should allow to move files and folders via drag and drop.
    "explorer.enableDragAndDrop": true,

    // Number of editors shown in the Open Editors pane.
    "explorer.openEditors.visible": 9,

    // Controls sorting order of files and folders in the explorer.
    //  - default: Files and folders are sorted by their names, in alphabetical order. Folders are displayed before files.
    //  - mixed: Files and folders are sorted by their names, in alphabetical order. Files are interwoven with folders.
    //  - filesFirst: Files and folders are sorted by their names, in alphabetical order. Files are displayed before folders.
    //  - type: Files and folders are sorted by their extensions, in alphabetical order. Folders are displayed before files.
    //  - modified: Files and folders are sorted by last modified date, in descending order. Folders are displayed before files.
    "explorer.sortOrder": "default"

  },
  {


    // Controls the positioning of the actionbar on rows in the search view.
    //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
    //  - right: Always position the actionbar to the right.
    "search.actionsPosition": "auto",

    // Controls whether the search results will be collapsed or expanded.
    //  - auto: Files with less than 10 results are expanded. Others are collapsed.
    //  - alwaysCollapse
    //  - alwaysExpand
    "search.collapseResults": "auto",

    // Configure glob patterns for excluding files and folders in searches. Inherits all glob patterns from the `files.exclude` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "search.exclude": {
      "**/node_modules": true,
      "**/bower_components": true
    },

    // Controls whether to follow symlinks while searching.
    "search.followSymlinks": true,

    // Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
    "search.location": "sidebar",

    // Whether to include results from recently opened files in the file results for Quick Open.
    "search.quickOpen.includeHistory": true,

    // Whether to include results from a global symbol search in the file results for Quick Open.
    "search.quickOpen.includeSymbols": false,

    // Whether to run search in the extension host. Requires a restart to take effect.
    "search.runInExtensionHost": false,

    // Controls whether to show line numbers for search results.
    "search.showLineNumbers": false,

    // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
    "search.smartCase": false,

    // Controls whether to use global `.gitignore` and `.ignore` files when searching for files.
    "search.useGlobalIgnoreFiles": false,

    // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
    "search.useIgnoreFiles": true,

    // Controls whether to use the deprecated legacy mode for text and file search. It supports some text encodings that are not supported by the standard ripgrep-based search.
    "search.useLegacySearch": false,

    // Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
    "search.usePCRE2": false,

    // Controls whether to open Replace Preview when selecting or replacing a match.
    "search.useReplacePreview": true,

    // Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
    // This setting is deprecated and now falls back on "search.usePCRE2".
    "search.useRipgrep": true,

    // Deprecated. Use "search.runInExtensionHost" instead
    // Whether to run search in the extension host
    "searchRipgrep.enable": false

  },
  {


    // The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables.
    "http.proxy": "",

    // The value to send as the 'Proxy-Authorization' header for every network request.
    "http.proxyAuthorization": null,

    // Controls whether the proxy server certificate should be verified against the list of supplied CAs.
    "http.proxyStrictSSL": true,

    // Experimental setting: Use the proxy support for extensions.
    //  - off: Disable proxy support for extensions.
    //  - on: Enable proxy support for extensions.
    //  - override: Enable proxy support for extensions, override request options.
    "http.proxySupport": "off"

  },
  {


    // Configure whether you receive automatic updates from an update channel. Requires a restart after change. The updates are fetched from a Microsoft online service.
    "update.channel": "default",

    // Enables Windows background updates. The updates are fetched from a Microsoft online service.
    "update.enableWindowsBackgroundUpdates": true,

    // Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
    "update.showReleaseNotes": true

  },
  {


    // Allow setting breakpoints in any file.
    "debug.allowBreakpointsEverywhere": false,

    // Controls whether the non-debug hovers should be enabled while debugging. When enabled the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is enabled.
    "debug.enableAllHovers": false,

    // Show variable values inline in editor while debugging.
    "debug.inlineValues": false,

    // Controls when the internal debug console should open.
    "debug.internalConsoleOptions": "openOnFirstSessionStart",

    // Controls when the debug view should open.
    "debug.openDebug": "openOnSessionStart",

    // Automatically open the explorer view at the end of a debug session
    "debug.openExplorerOnEnd": false,

    // Controls when the debug status bar should be visible.
    //  - never: Never show debug in status bar
    //  - always: Always show debug in status bar
    //  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
    "debug.showInStatusBar": "onFirstSessionStart",

    // Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`
    "debug.toolBarLocation": "floating",

    // Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces
    "launch": {
      "configurations": [],
      "compounds": []
    }

  },
  {


    // Enable/disable autoclosing of HTML tags.
    "html.autoClosingTags": true,

    // A list of JSON file paths that define custom attributes
    "html.experimental.custom.attributes": [],

    // A list of JSON file paths that define custom tags
    "html.experimental.custom.tags": [],

    // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
    "html.format.contentUnformatted": "pre,code,textarea",

    // Enable/disable default HTML formatter.
    "html.format.enable": true,

    // End with a newline.
    "html.format.endWithNewline": false,

    // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
    "html.format.extraLiners": "head, body, /html",

    // Format and indent `{{#foo}}` and `{{/foo}}`.
    "html.format.indentHandlebars": false,

    // Indent `<head>` and `<body>` sections.
    "html.format.indentInnerHtml": false,

    // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
    "html.format.maxPreserveNewLines": null,

    // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
    "html.format.preserveNewLines": true,

    // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
    "html.format.unformatted": "wbr",

    // Wrap attributes.
    //  - auto: Wrap attributes only when line length is exceeded.
    //  - force: Wrap each attribute except first.
    //  - force-aligned: Wrap each attribute except first and keep aligned.
    //  - force-expand-multiline: Wrap each attribute.
    //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
    "html.format.wrapAttributes": "auto",

    // Maximum amount of characters per line (0 = disable).
    "html.format.wrapLineLength": 120,

    // Angular 1 is obsolete and Angular completion will be removed.
    // Controls whether the built-in HTML language support suggests Angular V1 tags and properties.
    "html.suggest.angular1": false,

    // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
    "html.suggest.html5": true,

    // Ionic 1 is obsolete and Ionic completion will be removed.
    // Controls whether the built-in HTML language support suggests Ionic tags, properties and values.
    "html.suggest.ionic": false,

    // Traces the communication between VS Code and the HTML language server.
    "html.trace.server": "off",

    // Controls whether the built-in HTML language support validates embedded scripts.
    "html.validate.scripts": true,

    // Controls whether the built-in HTML language support validates embedded styles.
    "html.validate.styles": true

  },
  {


    // The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
    // Enables or disables color decorators
    "json.colorDecorators.enable": true,

    // Enable/disable default JSON formatter
    "json.format.enable": true,

    // Associate schemas to JSON files in the current project
    "json.schemas": [],

    // Traces the communication between VS Code and the JSON language server.
    "json.trace.server": "off"

  },
  {


    // Sets how line-breaks are rendered in the markdown preview. Setting it to 'true' creates a <br> for every newline.
    "markdown.preview.breaks": false,

    // Double click in the markdown preview to switch to the editor.
    "markdown.preview.doubleClickToSwitchToEditor": true,

    // Controls the font family used in the markdown preview.
    "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'HelveticaNeue-Light', 'Ubuntu', 'Droid Sans', sans-serif",

    // Controls the font size in pixels used in the markdown preview.
    "markdown.preview.fontSize": 14,

    // Controls the line height used in the markdown preview. This number is relative to the font size.
    "markdown.preview.lineHeight": 1.6,

    // Enable or disable conversion of URL-like text to links in the markdown preview.
    "markdown.preview.linkify": true,

    // Mark the current editor selection in the markdown preview.
    "markdown.preview.markEditorSelection": true,

    // How should clicking on links to markdown files be handled in the preview.
    //  - inPreview: Try to open links in the markdown preview
    //  - inEditor: Try to open links in the editor
    "markdown.preview.openMarkdownLinks": "inPreview",

    // When a markdown preview is scrolled, update the view of the editor.
    "markdown.preview.scrollEditorWithPreview": true,

    // When a markdown editor is scrolled, update the view of the preview.
    "markdown.preview.scrollPreviewWithEditor": true,

    // This setting has been replaced by 'markdown.preview.scrollPreviewWithEditor' and no longer has any effect.
    // [Deprecated] Scrolls the markdown preview to reveal the currently selected line from the editor.
    "markdown.preview.scrollPreviewWithEditorSelection": true,

    // Sets how YAML front matter should be rendered in the markdown preview. 'hide' removes the front matter. Otherwise, the front matter is treated as markdown content.
    "markdown.previewFrontMatter": "hide",

    // A list of URLs or local paths to CSS style sheets to use from the markdown preview. Relative paths are interpreted relative to the folder open in the explorer. If there is no open folder, they are interpreted relative to the location of the markdown file. All '\' need to be written as '\\'.
    "markdown.styles": [],

    // Enable debug logging for the markdown extension.
    "markdown.trace": "off"

  },
  {


    // Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
    "php.suggest.basic": true,

    // Enable/disable built-in PHP validation.
    "php.validate.enable": true,

    // Points to the PHP executable.
    "php.validate.executablePath": null,

    // Whether the linter is run on save or on type.
    "php.validate.run": "onSave"

  },
  {


    // Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.
    "javascript.autoClosingTags": true,

    // Enable/disable default JavaScript formatter.
    "javascript.format.enable": true,

    // Defines space handling after a comma delimiter.
    "javascript.format.insertSpaceAfterCommaDelimiter": true,

    // Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
    "javascript.format.insertSpaceAfterConstructor": false,

    // Defines space handling after function keyword for anonymous functions.
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

    // Defines space handling after keywords in a control flow statement.
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

    // Defines space handling after opening and before closing JSX expression braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

    // Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

    // Defines space handling after opening and before closing non-empty brackets.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

    // Defines space handling after opening and before closing non-empty parenthesis.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

    // Defines space handling after opening and before closing template string braces.
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

    // Defines space handling after a semicolon in a for statement.
    "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

    // Defines space handling after a binary operator.
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

    // Defines space handling before function argument parentheses.
    "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

    // Defines whether an open brace is put onto a new line for control blocks or not.
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

    // Defines whether an open brace is put onto a new line for functions or not.
    "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

    // Enable/disable semantic checking of JavaScript files. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
    "javascript.implicitProjectConfig.checkJs": false,

    // Enable/disable `experimentalDecorators` for JavaScript files that are not part of a project. Existing jsconfig.json or tsconfig.json files override this setting. Requires using TypeScript 2.3.1 or newer in the workspace.
    "javascript.implicitProjectConfig.experimentalDecorators": false,

    // Preferred path style for auto imports.
    //  - auto: Infer the shortest path type.
    //  - relative: Relative to the file location.
    //  - non-relative: Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.
    "javascript.preferences.importModuleSpecifier": "auto",

    // Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
    "javascript.preferences.quoteStyle": "auto",

    // Enable/disable references CodeLens in JavaScript files.
    "javascript.referencesCodeLens.enabled": false,

    // Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.
    "javascript.suggest.autoImports": true,

    // Complete functions with their parameter signature.
    "javascript.suggest.completeFunctionCalls": false,

    // Enabled/disable autocomplete suggestions.
    "javascript.suggest.enabled": true,

    // Enable/disable including unique names from the file in JavaScript suggestions.
    "javascript.suggest.names": true,

    // Enable/disable suggestions for paths in import statements and require calls.
    "javascript.suggest.paths": true,

    // Enable/disable suggestion diagnostics for JavaScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
    "javascript.suggestionActions.enabled": true,

    // Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.
    //  - prompt: Prompt on each rename.
    //  - always: Always update paths automatically.
    //  - never: Never rename paths and don't prompt.
    "javascript.updateImportsOnFileMove.enabled": "prompt",

    // Enable/disable JavaScript validation.
    "javascript.validate.enable": true,

    // Enable/disable auto JSDoc comments.
    "jsDocCompletion.enabled": true,

    // Enable/disable automatic closing of JSX tags. Requires using TypeScript 3.0 or newer in the workspace.
    "typescript.autoClosingTags": true,

    // Check if NPM is installed for Automatic Type Acquisition.
    "typescript.check.npmIsInstalled": true,

    // Disables automatic type acquisition. Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
    "typescript.disableAutomaticTypeAcquisition": false,

    // Enable/disable default TypeScript formatter.
    "typescript.format.enable": true,

    // Defines space handling after a comma delimiter.
    "typescript.format.insertSpaceAfterCommaDelimiter": true,

    // Defines space handling after the constructor keyword. Requires using TypeScript 2.3.0 or newer in the workspace.
    "typescript.format.insertSpaceAfterConstructor": false,

    // Defines space handling after function keyword for anonymous functions.
    "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

    // Defines space handling after keywords in a control flow statement.
    "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

    // Defines space handling after opening and before closing JSX expression braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

    // Defines space handling after opening and before closing non-empty braces. Requires using TypeScript 2.3.0 or newer in the workspace.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

    // Defines space handling after opening and before closing non-empty brackets.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

    // Defines space handling after opening and before closing non-empty parenthesis.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

    // Defines space handling after opening and before closing template string braces.
    "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

    // Defines space handling after a semicolon in a for statement.
    "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

    // Defines space handling after type assertions in TypeScript. Requires using TypeScript 2.4 or newer in the workspace.
    "typescript.format.insertSpaceAfterTypeAssertion": false,

    // Defines space handling after a binary operator.
    "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

    // Defines space handling before function argument parentheses.
    "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

    // Defines whether an open brace is put onto a new line for control blocks or not.
    "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

    // Defines whether an open brace is put onto a new line for functions or not.
    "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

    // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
    "typescript.implementationsCodeLens.enabled": false,

    // Sets the locale used to report JavaScript and TypeScript errors. Requires using TypeScript 2.6.0 or newer in the workspace. Default of `null` uses VS Code's locale.
    "typescript.locale": null,

    // Specifies the path to the NPM executable used for Automatic Type Acquisition. Requires using TypeScript 2.3.4 or newer in the workspace.
    "typescript.npm": null,

    // Preferred path style for auto imports.
    //  - auto: Infer the shortest path type.
    //  - relative: Relative to the file location.
    //  - non-relative: Based on the `baseUrl` configured in your `jsconfig.json` / `tsconfig.json`.
    "typescript.preferences.importModuleSpecifier": "auto",

    // Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports. Requires using TypeScript 2.9 or newer in the workspace.
    "typescript.preferences.quoteStyle": "auto",

    // Enable/disable references CodeLens in TypeScript files.
    "typescript.referencesCodeLens.enabled": false,

    // Report style checks as warnings.
    "typescript.reportStyleChecksAsWarnings": true,

    // Enable/disable auto import suggestions. Requires using TypeScript 2.6.1 or newer in the workspace.
    "typescript.suggest.autoImports": true,

    // Complete functions with their parameter signature.
    "typescript.suggest.completeFunctionCalls": false,

    // Enabled/disable autocomplete suggestions.
    "typescript.suggest.enabled": true,

    // Enable/disable suggestions for paths in import statements and require calls.
    "typescript.suggest.paths": true,

    // Enable/disable suggestion diagnostics for TypeScript files in the editor. Requires using TypeScript 2.8 or newer in the workspace.
    "typescript.suggestionActions.enabled": true,

    // Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
    "typescript.surveys.enabled": true,

    // Controls auto detection of tsc tasks.
    //  - on: Create both build and watch tasks.
    //  - off: Disable this feature.
    //  - build: Only create single run compile tasks.
    //  - watch: Only create compile and watch tasks.
    "typescript.tsc.autoDetect": "on",

    // Specifies the folder path containing the tsserver and lib*.d.ts files to use.
    "typescript.tsdk": null,

    // Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
    "typescript.tsserver.log": "off",

    // Additional paths to discover Typescript Language Service plugins. Requires using TypeScript 2.3.0 or newer in the workspace.
    "typescript.tsserver.pluginPaths": [],

    // Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
    "typescript.tsserver.trace": "off",

    // Enable/disable automatic updating of import paths when you rename or move a file in VS Code. Requires using TypeScript 2.9 or newer in the workspace.
    //  - prompt: Prompt on each rename.
    //  - always: Always update paths automatically.
    //  - never: Never rename paths and don't prompt.
    "typescript.updateImportsOnFileMove.enabled": "prompt",

    // Enable/disable TypeScript validation.
    "typescript.validate.enable": true

  },
  {


    // The setting `css.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
    // Enables or disables color decorators.
    "css.colorDecorators.enable": true,

    // Invalid number of parameters.
    "css.lint.argumentsInColorFunction": "error",

    // Do not use `width` or `height` when using `padding` or `border`.
    "css.lint.boxModel": "ignore",

    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "css.lint.compatibleVendorPrefixes": "ignore",

    // Do not use duplicate style definitions.
    "css.lint.duplicateProperties": "ignore",

    // Do not use empty rulesets.
    "css.lint.emptyRules": "warning",

    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "css.lint.float": "ignore",

    // `@font-face` rule must define `src` and `font-family` properties.
    "css.lint.fontFaceProperties": "warning",

    // Hex colors must consist of three or six hex numbers.
    "css.lint.hexColorLength": "error",

    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "css.lint.idSelector": "ignore",

    // IE hacks are only necessary when supporting IE7 and older.
    "css.lint.ieHack": "ignore",

    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "css.lint.important": "ignore",

    // Import statements do not load in parallel.
    "css.lint.importStatement": "ignore",

    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "css.lint.propertyIgnoredDueToDisplay": "warning",

    // The universal selector (`*`) is known to be slow.
    "css.lint.universalSelector": "ignore",

    // Unknown at-rule.
    "css.lint.unknownAtRules": "warning",

    // Unknown property.
    "css.lint.unknownProperties": "warning",

    // Unknown vendor specific property.
    "css.lint.unknownVendorSpecificProperties": "ignore",

    // A list of properties that are not validated against the `unknownProperties` rule.
    "css.lint.validProperties": [],

    // When using a vendor-specific prefix, also include the standard property.
    "css.lint.vendorPrefix": "warning",

    // No unit for zero needed.
    "css.lint.zeroUnits": "ignore",

    // Traces the communication between VS Code and the CSS language server.
    "css.trace.server": "off",

    // Enables or disables all validations.
    "css.validate": true

  },
  {


    // The setting `less.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
    // Enables or disables color decorators.
    "less.colorDecorators.enable": true,

    // Invalid number of parameters.
    "less.lint.argumentsInColorFunction": "error",

    // Do not use `width` or `height` when using `padding` or `border`.
    "less.lint.boxModel": "ignore",

    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "less.lint.compatibleVendorPrefixes": "ignore",

    // Do not use duplicate style definitions.
    "less.lint.duplicateProperties": "ignore",

    // Do not use empty rulesets.
    "less.lint.emptyRules": "warning",

    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "less.lint.float": "ignore",

    // `@font-face` rule must define `src` and `font-family` properties.
    "less.lint.fontFaceProperties": "warning",

    // Hex colors must consist of three or six hex numbers.
    "less.lint.hexColorLength": "error",

    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "less.lint.idSelector": "ignore",

    // IE hacks are only necessary when supporting IE7 and older.
    "less.lint.ieHack": "ignore",

    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "less.lint.important": "ignore",

    // Import statements do not load in parallel.
    "less.lint.importStatement": "ignore",

    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "less.lint.propertyIgnoredDueToDisplay": "warning",

    // The universal selector (`*`) is known to be slow.
    "less.lint.universalSelector": "ignore",

    // Unknown property.
    "less.lint.unknownProperties": "warning",

    // Unknown vendor specific property.
    "less.lint.unknownVendorSpecificProperties": "ignore",

    // A list of properties that are not validated against the `unknownProperties` rule.
    "less.lint.validProperties": [],

    // When using a vendor-specific prefix, also include the standard property.
    "less.lint.vendorPrefix": "warning",

    // No unit for zero needed.
    "less.lint.zeroUnits": "ignore",

    // Enables or disables all validations.
    "less.validate": true

  },
  {


    // The setting `scss.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
    // Enables or disables color decorators.
    "scss.colorDecorators.enable": true,

    // Invalid number of parameters.
    "scss.lint.argumentsInColorFunction": "error",

    // Do not use `width` or `height` when using `padding` or `border`.
    "scss.lint.boxModel": "ignore",

    // When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
    "scss.lint.compatibleVendorPrefixes": "ignore",

    // Do not use duplicate style definitions.
    "scss.lint.duplicateProperties": "ignore",

    // Do not use empty rulesets.
    "scss.lint.emptyRules": "warning",

    // Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
    "scss.lint.float": "ignore",

    // `@font-face` rule must define `src` and `font-family` properties.
    "scss.lint.fontFaceProperties": "warning",

    // Hex colors must consist of three or six hex numbers.
    "scss.lint.hexColorLength": "error",

    // Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
    "scss.lint.idSelector": "ignore",

    // IE hacks are only necessary when supporting IE7 and older.
    "scss.lint.ieHack": "ignore",

    // Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
    "scss.lint.important": "ignore",

    // Import statements do not load in parallel.
    "scss.lint.importStatement": "ignore",

    // Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
    "scss.lint.propertyIgnoredDueToDisplay": "warning",

    // The universal selector (`*`) is known to be slow.
    "scss.lint.universalSelector": "ignore",

    // Unknown property.
    "scss.lint.unknownProperties": "warning",

    // Unknown vendor specific property.
    "scss.lint.unknownVendorSpecificProperties": "ignore",

    // A list of properties that are not validated against the `unknownProperties` rule.
    "scss.lint.validProperties": [],

    // When using a vendor-specific prefix, also include the standard property.
    "scss.lint.vendorPrefix": "warning",

    // No unit for zero needed.
    "scss.lint.zeroUnits": "ignore",

    // Enables or disables all validations.
    "scss.validate": true

  },
  {


    // When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
    "extensions.autoCheckUpdates": true,

    // When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.
    "extensions.autoUpdate": true,

    // When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
    "extensions.closeExtensionDetailsOnViewChange": false,

    // When enabled, the notifications for extension recommendations will not be shown.
    "extensions.ignoreRecommendations": false,

    // When enabled, recommendations will not be fetched or shown unless specifically requested by the user. Some recommendations are fetched from a Microsoft online service.
    "extensions.showRecommendationsOnlyOnDemand": false

  },
  {


    // Customizes what kind of terminal to launch.
    //  - integrated: Use VS Code's integrated terminal.
    //  - external: Use the configured external terminal.
    "terminal.explorerKind": "integrated",

    // Customizes which terminal to run on Linux.
    "terminal.external.linuxExec": "xterm",

    // Customizes which terminal application to run on macOS.
    "terminal.external.osxExec": "Terminal.app",

    // Customizes which terminal to run on Windows.
    "terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe"

  },
  {


    // A set of command IDs whose keybindings will not be sent to the shell and instead always be handled by Code. This allows the use of keybindings that would normally be consumed by the shell to act the same as when the terminal is not focused, for example ctrl+p to launch Quick Open.
    "terminal.integrated.commandsToSkipShell": [
      "editor.action.toggleTabFocusMode",
      "workbench.action.debug.continue",
      "workbench.action.debug.pause",
      "workbench.action.debug.restart",
      "workbench.action.debug.run",
      "workbench.action.debug.start",
      "workbench.action.debug.stepInto",
      "workbench.action.debug.stepOut",
      "workbench.action.debug.stepOver",
      "workbench.action.debug.stop",
      "workbench.action.firstEditorInGroup",
      "workbench.action.focusActiveEditorGroup",
      "workbench.action.focusEighthEditorGroup",
      "workbench.action.focusFifthEditorGroup",
      "workbench.action.focusFirstEditorGroup",
      "workbench.action.focusFourthEditorGroup",
      "workbench.action.focusLastEditorGroup",
      "workbench.action.focusSecondEditorGroup",
      "workbench.action.focusSeventhEditorGroup",
      "workbench.action.focusSixthEditorGroup",
      "workbench.action.focusThirdEditorGroup",
      "workbench.action.lastEditorInGroup",
      "workbench.action.navigateDown",
      "workbench.action.navigateLeft",
      "workbench.action.navigateRight",
      "workbench.action.navigateUp",
      "workbench.action.nextPanelView",
      "workbench.action.nextSideBarView",
      "workbench.action.openNextRecentlyUsedEditorInGroup",
      "workbench.action.openPreviousRecentlyUsedEditorInGroup",
      "workbench.action.previousPanelView",
      "workbench.action.previousSideBarView",
      "workbench.action.quickOpen",
      "workbench.action.quickOpenPreviousEditor",
      "workbench.action.quickOpenView",
      "workbench.action.showCommands",
      "workbench.action.tasks.build",
      "workbench.action.tasks.reRunTask",
      "workbench.action.tasks.restartTask",
      "workbench.action.tasks.runTask",
      "workbench.action.tasks.showLog",
      "workbench.action.tasks.showTasks",
      "workbench.action.tasks.terminate",
      "workbench.action.tasks.test",
      "workbench.action.terminal.clear",
      "workbench.action.terminal.clearSelection",
      "workbench.action.terminal.copySelection",
      "workbench.action.terminal.deleteToLineStart",
      "workbench.action.terminal.deleteWordLeft",
      "workbench.action.terminal.deleteWordRight",
      "workbench.action.terminal.findNextTerminalFocus",
      "workbench.action.terminal.findPreviousTerminalFocus",
      "workbench.action.terminal.focus",
      "workbench.action.terminal.focusAtIndex1",
      "workbench.action.terminal.focusAtIndex2",
      "workbench.action.terminal.focusAtIndex3",
      "workbench.action.terminal.focusAtIndex4",
      "workbench.action.terminal.focusAtIndex5",
      "workbench.action.terminal.focusAtIndex6",
      "workbench.action.terminal.focusAtIndex7",
      "workbench.action.terminal.focusAtIndex8",
      "workbench.action.terminal.focusAtIndex9",
      "workbench.action.terminal.focusFindWidget",
      "workbench.action.terminal.focusNext",
      "workbench.action.terminal.focusNextPane",
      "workbench.action.terminal.focusPrevious",
      "workbench.action.terminal.focusPreviousPane",
      "workbench.action.terminal.hideFindWidget",
      "workbench.action.terminal.kill",
      "workbench.action.terminal.moveToLineEnd",
      "workbench.action.terminal.moveToLineStart",
      "workbench.action.terminal.new",
      "workbench.action.terminal.newInActiveWorkspace",
      "workbench.action.terminal.paste",
      "workbench.action.terminal.resizePaneDown",
      "workbench.action.terminal.resizePaneLeft",
      "workbench.action.terminal.resizePaneRight",
      "workbench.action.terminal.resizePaneUp",
      "workbench.action.terminal.runActiveFile",
      "workbench.action.terminal.runSelectedText",
      "workbench.action.terminal.scrollDown",
      "workbench.action.terminal.scrollDownPage",
      "workbench.action.terminal.scrollToBottom",
      "workbench.action.terminal.scrollToNextCommand",
      "workbench.action.terminal.scrollToPreviousCommand",
      "workbench.action.terminal.scrollToTop",
      "workbench.action.terminal.scrollUp",
      "workbench.action.terminal.scrollUpPage",
      "workbench.action.terminal.selectAll",
      "workbench.action.terminal.selectToNextCommand",
      "workbench.action.terminal.selectToNextLine",
      "workbench.action.terminal.selectToPreviousCommand",
      "workbench.action.terminal.selectToPreviousLine",
      "workbench.action.terminal.sendSequence",
      "workbench.action.terminal.split",
      "workbench.action.terminal.splitInActiveWorkspace",
      "workbench.action.terminal.toggleFindCaseSensitiveTerminalFocus",
      "workbench.action.terminal.toggleFindRegexTerminalFocus",
      "workbench.action.terminal.toggleFindWholeWordTerminalFocus",
      "workbench.action.terminal.toggleTerminal",
      "workbench.action.toggleFullScreen",
      "workbench.action.toggleMaximizedPanel",
      "workbench.action.togglePanel"
    ],

    // Controls whether to confirm on exit if there are active terminal sessions.
    "terminal.integrated.confirmOnExit": false,

    // Controls whether text selected in the terminal will be copied to the clipboard.
    "terminal.integrated.copyOnSelection": false,

    // Controls whether the terminal cursor blinks.
    "terminal.integrated.cursorBlinking": false,

    // Controls the style of terminal cursor.
    "terminal.integrated.cursorStyle": "block",

    // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
    "terminal.integrated.cwd": "",

    // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
    "terminal.integrated.drawBoldTextInBrightColors": true,

    // Controls whether the terminal bell is enabled.
    "terminal.integrated.enableBell": false,

    // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
    "terminal.integrated.env.linux": {},

    // Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
    "terminal.integrated.env.osx": {},

    // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
    "terminal.integrated.env.windows": {},

    // Controls the terminal's internal buffer implementation. This setting is picked up on terminal creation and will not apply to existing terminals.
    "terminal.integrated.experimentalBufferImpl": "JsArray",

    // Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
    "terminal.integrated.fontFamily": "",

    // Controls the font size in pixels of the terminal.
    "terminal.integrated.fontSize": 14,

    // The font weight to use within the terminal for non-bold text.
    "terminal.integrated.fontWeight": "normal",

    // The font weight to use within the terminal for bold text.
    "terminal.integrated.fontWeightBold": "bold",

    // Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
    "terminal.integrated.letterSpacing": 0,

    // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
    "terminal.integrated.lineHeight": 1,

    // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
    "terminal.integrated.macOptionClickForcesSelection": false,

    // Controls whether to treat the option key as the meta key in the terminal on macOS.
    "terminal.integrated.macOptionIsMeta": false,

    // Controls how the terminal is rendered.
    //  - auto: Let VS Code guess which renderer to use.
    //  - canvas: Use the standard GPU/canvas-based renderer
    //  - dom: Use the fallback DOM-based renderer.
    "terminal.integrated.rendererType": "auto",

    // Controls how terminal reacts to right click.
    //  - default: Show the context menu.
    //  - copyPaste: Copy when there is a selection, otherwise paste.
    //  - selectWord: Select the word under the cursor and show the context menu.
    "terminal.integrated.rightClickBehavior": "copyPaste",

    // Controls the maximum amount of lines the terminal keeps in its buffer.
    "terminal.integrated.scrollback": 1000,

    // Controls whether locale variables are set at startup of the terminal, this defaults to `true` on macOS, `false` on other platforms.
    "terminal.integrated.setLocaleVariables": false,

    // The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
    "terminal.integrated.shell.linux": "/bin/bash",

    // The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
    "terminal.integrated.shell.osx": "/bin/bash",

    // The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
    "terminal.integrated.shell.windows": "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",

    // The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
    "terminal.integrated.shellArgs.linux": [],

    // The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
    "terminal.integrated.shellArgs.osx": [
      "-l"
    ],

    // The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).
    "terminal.integrated.shellArgs.windows": [],

    // Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
    "terminal.integrated.showExitAlert": true,

    // Controls the working directory a split terminal starts with.
    //  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
    //  - initial: A new split terminal will use the working directory that the parent terminal started with.
    //  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
    "terminal.integrated.splitCwd": "inherited"

  },
  {


    // Controls whether Problems view should automatically reveal files when opening them.
    "problems.autoReveal": true,

    // Show Errors & Warnings on files and folder.
    "problems.decorations.enabled": true

  },
  {


    // Enable/disable navigation breadcrumbs
    "breadcrumbs.enabled": false,

    // Controls whether and how file paths are shown in the breadcrumbs view.
    //  - on: Show the file path in the breadcrumbs view.
    //  - off: Do not show the file path in the breadcrumbs view.
    //  - last: Only show the last element of the file path in the breadcrumbs view.
    "breadcrumbs.filePath": "on",

    // Controls whether and how symbols are shown in the breadcrumbs view.
    //  - on: Show all symbols in the breadcrumbs view.
    //  - off: Do not show symbols in the breadcrumbs view.
    //  - last: Only show the current symbol in the breadcrumbs view.
    "breadcrumbs.symbolPath": "on",

    // Controls how symbols are sorted in the breadcrumbs outline view.
    //  - position: Show symbol outline in file position order.
    //  - name: Show symbol outline in alphabetical order.
    //  - type: Show symbol outline in symbol type order.
    "breadcrumbs.symbolSortOrder": "position"

  },
  {


    // Enable crash reports to be sent to a Microsoft online service. 
    // This option requires restart to take effect.
    "telemetry.enableCrashReporter": true,

    // Enable usage data and errors to be sent to a Microsoft online service.
    "telemetry.enableTelemetry": true

  },
  {


    // Render Outline Elements with Icons.
    "outline.icons": true,

    // Use badges for Errors & Warnings.
    "outline.problems.badges": true,

    // Use colors for Errors & Warnings.
    "outline.problems.colors": true,

    // Show Errors & Warnings on Outline Elements.
    "outline.problems.enabled": true

  },
  {


    // Sets an absolute path to the current workspace
    "path-intellisense.absolutePathToWorkspace": true,

    // Automatically adds slash after directory
    "path-intellisense.autoSlashAfterDirectory": false,

    // Adds the file extension to a import statements
    "path-intellisense.extensionOnImport": false,

    // Mappings for paths
    "path-intellisense.mappings": {},

    // Show hidden files
    "path-intellisense.showHiddenFiles": false

  },
  {


    // Complete connection configuration for your MongoDB.
    "mongoRunner": {}

  },
  {


    // Configure editor settings to be overridden for [git-commit] language.
    "[git-commit]": {
      "editor.rulers": [
        72
      ]
    },

    // Configure editor settings to be overridden for [go] language.
    "[go]": {
      "editor.insertSpaces": false
    },

    // Configure editor settings to be overridden for [json] language.
    "[json]": {
      "editor.quickSuggestions": {
        "strings": true
      }
    },

    // Configure editor settings to be overridden for [makefile] language.
    "[makefile]": {
      "editor.insertSpaces": false
    },

    // Configure editor settings to be overridden for [markdown] language.
    "[markdown]": {
      "editor.wordWrap": "on",
      "editor.quickSuggestions": false
    },

    // Configure editor settings to be overridden for [yaml] language.
    "[yaml]": {
      "editor.insertSpaces": true,
      "editor.tabSize": 2,
      "editor.autoIndent": false
    }

  },
  {


    // Auto strip module extensions
    "node-module-intellisense.autoStripExtensions": [
      ".js",
      ".jsx",
      ".ts",
      ".d.ts",
      ".tsx"
    ],

    // Module Paths to scan. Use ${workspaceRoot} for workspace lookup.
    "node-module-intellisense.modulePaths": [],

    // Scans builtin modules as well
    "node-module-intellisense.scanBuiltinModules": true,

    // Scans devDependencies as well
    "node-module-intellisense.scanDevDependencies": true,

    // Scans file modules as well
    "node-module-intellisense.scanFileModules": true

  },
  {


    // Controls whether auto detection of Jake tasks is on or off. Default is on.
    "jake.autoDetect": "on"

  },
  {


    // Time of pause, in minutes
    "pomodoro.pauseTime": 5,

    // Number of repeat before long break
    "pomodoro.repeat": 4,

    // Time of work, in minutes.
    "pomodoro.workTime": 25

  },
  {


    // Controls whether auto detection of Grunt tasks is on or off. Default is on.
    "grunt.autoDetect": "on"

  },
  {


    // The default subpath of a workspace folder to use when deploying. If set, you will not be prompted for the folder path when deploying.
    "azureFunctions.deploySubpath": "",

    // Enable remote debugging, an experimental feature that only supports Java-based Functions Apps.
    "azureFunctions.enableRemoteDebugging": false,

    // Enable preview support for slots.
    "azureFunctions.enableSlots": false,

    // The timeout (in seconds) to be used when searching for the Azure Functions host process. Since a build is required every time you F5, you may need to adjust this based on how long your build takes.
    "azureFunctions.pickProcessTimeout": 60,

    // The name of the task to run before zip deployments.
    "azureFunctions.preDeployTask": "",

    // The default language to use when performing operations in the Azure Functions extension (e.g. "Create New Function").
    //  - Bash: (Preview)
    //  - Batch: (Preview)
    //  - C#
    //  - C#Script: (Preview)
    //  - F#Script: (Preview)
    //  - Java
    //  - JavaScript
    //  - PHP: (Preview)
    //  - PowerShell: (Preview)
    //  - Python: (Preview)
    //  - TypeScript: (Preview)
    "azureFunctions.projectLanguage": "",

    // The behavior to use after creating a new project. The options are "AddToWorkspace", "OpenInNewWindow", or "OpenInCurrentWindow".
    "azureFunctions.projectOpenBehavior": "",

    // The default runtime to use when performing operations in the Azure Functions extension (e.g. "Create New Function").
    //  - ~1: Azure Functions v1 (.NET Framework)
    //  - ~2: Azure Functions v2 (.NET Standard)
    //  - beta: DEPRECATED Use "~2" instead.
    "azureFunctions.projectRuntime": "",

    // The name of the Python virtual environment used for your project. A virtual environment is required to debug and deploy Python functions.
    "azureFunctions.pythonVenv": "",

    // Show a warning to install a 64-bit version of the Azure Functions Core Tools when you create a .NET Framework project.
    "azureFunctions.show64BitWarning": true,

    // Show a warning if your installed version of Azure Functions Core Tools is out-of-date.
    "azureFunctions.showCoreToolsWarning": true,

    // Show a warning when an Azure Functions project was detected that has an out-of-date debug configuration.
    "azureFunctions.showDebugConfigWarning": true,

    // Show a warning when the "deploySubpath" setting does not match the selected folder for deploying.
    "azureFunctions.showDeploySubpathWarning": true,

    // Show or hide the Azure Functions Explorer
    "azureFunctions.showExplorer": true,

    // Show a warning to install Azure Functions Core Tools CLI when you create a new project if the CLI is not installed.
    "azureFunctions.showFuncInstallation": true,

    // Show a warning when an Azure Functions project was detected that has not been initialized for use in VS Code.
    "azureFunctions.showProjectWarning": true,

    // Show a warning when an Azure Functions Python project was detected that does not have a virtual environment.
    "azureFunctions.showPythonVenvWarning": true,

    // Specify the templates to display when creating a new function. The supported values are 'Verified', 'Core', and 'All'. The 'Verified' category is a subset of 'Core' that has been verified to work with the latest VS Code extension.
    "azureFunctions.templateFilter": "Verified",

    // A runtime release version (any runtime) that species which templates will be used rather than the latest templates.  This version will be used for ALL runtimes. (Requires a restart of VS Code to take effect)
    "azureFunctions.templateVersion": "",

    // Defines which files in the workspace to deploy. This applies to Zip deploy only, has no effect on other deployment methods.
    "azureFunctions.zipGlobPattern": "**/*",

    // Defines which files in the workspace to ignore for Zip deploy. This applies to Zip deploy only, has no effect on other deployment methods.
    "azureFunctions.zipIgnorePattern": ""

  },
  {


    // Controls whether npm scripts should be automatically detected.
    "npm.autoDetect": "on",

    // Enable an explorer view for npm scripts.
    "npm.enableScriptExplorer": false,

    // Configure glob patterns for folders that should be excluded from automatic script detection.
    "npm.exclude": "",

    // Fetch data from https://registry.npmjs/org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
    "npm.fetchOnlinePackageInfo": true,

    // The package manager used to run scripts.
    "npm.packageManager": "npm",

    // Run npm commands with the `--silent` option.
    "npm.runSilent": false,

    // The default click action used in the scripts explorer: `open` or `run`, the default is `open`.
    "npm.scriptExplorerAction": "open"

  },
  {


    // Delay before diagnostic messages are transferred to the problems list (in milliseconds).
    "python.analysis.diagnosticPublishDelay": 1000,

    // List of suppressed diagnostic messages.
    "python.analysis.disabled": [],

    // List of diagnostics messages to be shown as errors.
    "python.analysis.errors": [],

    // List of diagnostics messages to be shown as information.
    "python.analysis.information": [],

    // Defines type of log messages language server writes into the output window.
    "python.analysis.logLevel": "Error",

    // Only show errors and warnings for open files rather than for the entire workspace.
    "python.analysis.openFilesOnly": true,

    // Limits depth of the symbol tree in the document outline.
    "python.analysis.symbolsHierarchyDepthLimit": 10,

    // Paths to look for typeshed modules.
    "python.analysis.typeshedPaths": [],

    // List of diagnostics messages to be shown as warnings.
    "python.analysis.warnings": [],

    // Automatically add brackets for functions.
    "python.autoComplete.addBrackets": false,

    // List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
    "python.autoComplete.extraPaths": [],

    // Controls appearance of methods with double underscores in the completion list.
    "python.autoComplete.showAdvancedMembers": true,

    // Specifies paths to local typeshed repository clone(s) for the Python language server.
    "python.autoComplete.typeshedPaths": [],

    // Automatically update the language server.
    "python.autoUpdateLanguageServer": true,

    // Path to the conda executable to use for activation (version 4.4+).
    "python.condaPath": "",

    // Allows a user to import a jupyter notebook into a python file anytime one is opened.
    "python.dataScience.allowImportFromNotebook": true,

    // When importing or exporting a Jupyter Notebook add a directory change command to allow relative path loading to work.
    "python.dataScience.changeDirOnImportExport": true,

    // Enable the experimental data science features in the python extension.
    "python.dataScience.enabled": true,

    // Enable exporting a python file into a jupyter notebook and run all cells when doing so.
    "python.dataScience.exportWithOutputEnabled": false,

    // Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
    "python.dataScience.jupyterInterruptTimeout": 10000,

    // Amount of time (in ms) to wait for the Jupyter Notebook server to start.
    "python.dataScience.jupyterLaunchTimeout": 60000,

    // Select the Jupyter server URI to connect to. Select 'local' to launch a new Juypter server on the local machine.
    "python.dataScience.jupyterServerURI": "local",

    // Set the root directory for loading files for the Python Interactive window.
    "python.dataScience.notebookFileRoot": "${workspaceFolder}",

    // When running Jupyter locally, create a default empty Jupyter config for the Python Interactive window
    "python.dataScience.useDefaultConfigForJupyter": true,

    // Enable source map support for meaningful strack traces in error logs.
    "python.diagnostics.sourceMapsEnabled": false,

    // Whether to check if Python is installed (also warn when using the macOS-installed Python).
    "python.disableInstallationCheck": false,

    // Absolute path to a file containing environment variable definitions.
    "python.envFile": "${workspaceFolder}/.env",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.autopep8Args": [],

    // Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
    "python.formatting.autopep8Path": "autopep8",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.blackArgs": [],

    // Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
    "python.formatting.blackPath": "black",

    // Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
    "python.formatting.provider": "autopep8",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.formatting.yapfArgs": [],

    // Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
    "python.formatting.yapfPath": "yapf",

    // Whether to install Python modules globally when not using an environment.
    "python.globalModuleInstallation": false,

    // Enables Jedi as IntelliSense engine instead of Microsoft Python Analysis Engine.
    "python.jediEnabled": true,

    // Memory limit for the Jedi completion engine in megabytes. Zero (default) means 1024 MB. -1 means unlimited (disable memory limit check)
    "python.jediMemoryLimit": 0,

    // Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory).
    "python.jediPath": "",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.banditArgs": [],

    // Whether to lint Python files using bandit.
    "python.linting.banditEnabled": false,

    // Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
    "python.linting.banditPath": "bandit",

    // Whether to lint Python files.
    "python.linting.enabled": true,

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.flake8Args": [],

    // Severity of Flake8 message type 'E'.
    "python.linting.flake8CategorySeverity.E": "Error",

    // Severity of Flake8 message type 'F'.
    "python.linting.flake8CategorySeverity.F": "Error",

    // Severity of Flake8 message type 'W'.
    "python.linting.flake8CategorySeverity.W": "Warning",

    // Whether to lint Python files using flake8
    "python.linting.flake8Enabled": false,

    // Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
    "python.linting.flake8Path": "flake8",

    // Patterns used to exclude files or folders from being linted.
    "python.linting.ignorePatterns": [
      ".vscode/*.py",
      "**/site-packages/**/*.py"
    ],

    // Whether to lint Python files when saved.
    "python.linting.lintOnSave": true,

    // Controls the maximum number of problems produced by the server.
    "python.linting.maxNumberOfProblems": 100,

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.mypyArgs": [
      "--ignore-missing-imports",
      "--follow-imports=silent"
    ],

    // Severity of Mypy message type 'Error'.
    "python.linting.mypyCategorySeverity.error": "Error",

    // Severity of Mypy message type 'Note'.
    "python.linting.mypyCategorySeverity.note": "Information",

    // Whether to lint Python files using mypy.
    "python.linting.mypyEnabled": false,

    // Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
    "python.linting.mypyPath": "mypy",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pep8Args": [],

    // Severity of Pep8 message type 'E'.
    "python.linting.pep8CategorySeverity.E": "Error",

    // Severity of Pep8 message type 'W'.
    "python.linting.pep8CategorySeverity.W": "Warning",

    // Whether to lint Python files using pep8
    "python.linting.pep8Enabled": false,

    // Path to pep8, you can use a custom version of pep8 by modifying this setting to include the full path.
    "python.linting.pep8Path": "pep8",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.prospectorArgs": [],

    // Whether to lint Python files using prospector.
    "python.linting.prospectorEnabled": false,

    // Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
    "python.linting.prospectorPath": "prospector",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pydocstyleArgs": [],

    // Whether to lint Python files using pydocstyle
    "python.linting.pydocstyleEnabled": false,

    // Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
    "python.linting.pydocstylePath": "pydocstyle",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pylamaArgs": [],

    // Whether to lint Python files using pylama.
    "python.linting.pylamaEnabled": false,

    // Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
    "python.linting.pylamaPath": "pylama",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.linting.pylintArgs": [],

    // Severity of Pylint message type 'Convention/C'.
    "python.linting.pylintCategorySeverity.convention": "Information",

    // Severity of Pylint message type 'Error/E'.
    "python.linting.pylintCategorySeverity.error": "Error",

    // Severity of Pylint message type 'Fatal/F'.
    "python.linting.pylintCategorySeverity.fatal": "Error",

    // Severity of Pylint message type 'Refactor/R'.
    "python.linting.pylintCategorySeverity.refactor": "Hint",

    // Severity of Pylint message type 'Warning/W'.
    "python.linting.pylintCategorySeverity.warning": "Warning",

    // Whether to lint Python files using pylint.
    "python.linting.pylintEnabled": true,

    // Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
    "python.linting.pylintPath": "pylint",

    // Whether to run Pylint with minimal set of rules.
    "python.linting.pylintUseMinimalCheckers": true,

    // Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
    "python.pythonPath": "python",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.sortImports.args": [],

    // Path to isort script, default using inner version
    "python.sortImports.path": "",

    // Activate Python Environment in Terminal created using the Extension.
    "python.terminal.activateEnvironment": true,

    // When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
    "python.terminal.executeInFileDir": false,

    // Python launch arguments to use when executing a file in the terminal.
    "python.terminal.launchArgs": [],

    // Whether to enable or disable auto run test discovery when saving a unit test file.
    "python.unitTest.autoTestDiscoverOnSaveEnabled": true,

    // Optional working directory for unit tests.
    "python.unitTest.cwd": null,

    // Port number used for debugging of unittests.
    "python.unitTest.debugPort": 3000,

    // Arguments passed in. Each argument is a separate item in the array.
    "python.unitTest.nosetestArgs": [],

    // Path to nosetests, you can use a custom version of nosetests by modifying this setting to include the full path.
    "python.unitTest.nosetestPath": "nosetests",

    // Whether to enable or disable unit testing using nosetests.
    "python.unitTest.nosetestsEnabled": false,

    // Where to prompt to configure a test framework if potential tests directories are discovered.
    "python.unitTest.promptToConfigure": true,

    // Arguments passed in. Each argument is a separate item in the array.
    "python.unitTest.pyTestArgs": [],

    // Whether to enable or disable unit testing using pytest.
    "python.unitTest.pyTestEnabled": false,

    // Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
    "python.unitTest.pyTestPath": "pytest",

    // Arguments passed in. Each argument is a separate item in the array.
    "python.unitTest.unittestArgs": [
      "-v",
      "-s",
      ".",
      "-p",
      "*test*.py"
    ],

    // Whether to enable or disable unit testing using unittest.
    "python.unitTest.unittestEnabled": false,

    // Folders in your home directory to look into for virtual environments.
    "python.venvFolders": [
      "envs",
      ".pyenv",
      ".direnv"
    ],

    // Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
    "python.venvPath": "",

    // Fully qualified path to the ctags executable (else leave as ctags, assuming it is in current path).
    "python.workspaceSymbols.ctagsPath": "ctags",

    // Set to 'false' to disable Workspace Symbol provider using ctags.
    "python.workspaceSymbols.enabled": true,

    // Pattern used to exclude files and folders from ctags See http://ctags.sourceforge.net/ctags.html.
    "python.workspaceSymbols.exclusionPatterns": [
      "**/site-packages/**"
    ],

    // Whether to re-build the tags file on when changes made to python files are saved.
    "python.workspaceSymbols.rebuildOnFileSave": true,

    // Whether to re-build the tags file on start (defaults to true).
    "python.workspaceSymbols.rebuildOnStart": true,

    // Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.
    "python.workspaceSymbols.tagFilePath": "${workspaceFolder}/.vscode/tags"

  },
  {


    // An array of languages where Emmet abbreviations should not be expanded.
    "emmet.excludeLanguages": [
      "markdown"
    ],

    // Path to a folder containing Emmet profiles and snippets.
    "emmet.extensionsPath": null,

    // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.
    //  E.g.: `{"vue-html": "html", "javascript": "javascriptreact"}`
    "emmet.includeLanguages": {},

    // When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in css/scss/less files is parsed.
    "emmet.optimizeStylesheetParsing": true,

    // Preferences used to modify behavior of some actions and resolvers of Emmet.
    "emmet.preferences": {},

    // Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
    "emmet.showAbbreviationSuggestions": true,

    // Shows expanded Emmet abbreviations as suggestions.
    // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
    // The option `"always"` applies to all parts of the file regardless of markup/css.
    "emmet.showExpandedAbbreviation": "always",

    // If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
    "emmet.showSuggestionsAsSnippets": false,

    // Define profile for specified syntax or use your own profile with specific rules.
    "emmet.syntaxProfiles": {},

    // When enabled, Emmet abbreviations are expanded when pressing TAB.
    "emmet.triggerExpansionOnTab": false,

    // Variables to be used in Emmet snippets
    "emmet.variables": {}

  },
  {


    // Path to the Mongo shell executable
    "mongo.shell.path": null,

    // Show or hide the Mongo Explorer
    "mongo.showExplorer": true

  },
  {


    // For import command. The declaration type used for require()
    "npm-intellisense.importDeclarationType": "const",

    // For import command. Use import statements instead of require()
    "npm-intellisense.importES6": true,

    // For import command. The linebreak used after the snippet
    "npm-intellisense.importLinebreak": ";\r\n",

    // For import command. The type of quotes to use in the snippet
    "npm-intellisense.importQuotes": "'",

    // (experimental) Enables path intellisense in subfolders of modules
    "npm-intellisense.packageSubfoldersIntellisense": false,

    // Look for package.json inside nearest directory instead of workspace root
    "npm-intellisense.recursivePackageJsonLookup": true,

    // Scans devDependencies as well
    "npm-intellisense.scanDevDependencies": false,

    // shows build in node modules like 'path' of 'fs'
    "npm-intellisense.showBuildInLibs": false

  },
  {


    // The current Azure Cloud to connect to.
    //  - Azure: Azure
    //  - AzureChina: Azure China
    //  - AzureGermanCloud: Azure Germany
    //  - AzureUSGovernment: Azure US Government
    "azure.cloud": "Azure",

    // Development setting: The PPE environment for testing.
    "azure.ppe": null,

    // The resource filter, each element is a tenant id and a subscription id separated by a slash.
    "azure.resourceFilter": null,

    // Whether to show the email address (e.g., in the status bar) of the signed in account.
    "azure.showSignedInEmail": true,

    // A specific tenant to sign in to. The default is to sign in to the common tenant and use all known tenants.
    "azure.tenant": ""

  },
  {


    // A path to file containing the configuration options for jshint. If the file exists it overrides jshint.options and any .jshintrc file
    "jshint.config": null,

    // Control whether or not jshint is enabled for JavaScript files.
    "jshint.enable": true,

    // Matching files and directories are being ignored by jshint. Glob patterns are interpreted relative to the workspace's root folder.
    "jshint.exclude": {},

    // A path to a file containing patterns describing which files and directories should be ignored by jshint. If the file exists it overrides jshint.exclude and any .jshintignore file.
    "jshint.excludePath": null,

    // Lint JavaScript embedded in HTML
    "jshint.lintHTML": false,

    // Configures the path to the jshint module. Can be an absolute path or relative to the current directory.
    "jshint.nodePath": "",

    // The jshint options object to provide args to the jshint command.
    "jshint.options": {},

    // The package manager you use to install node modules.
    "jshint.packageManager": "npm",

    // Report warnings as errors
    "jshint.reportWarningsAsErrors": false,

    // Traces the communication between VS Code and the jshint linter service.
    "jshint.trace.server": "off"

  },
  {


    // Preferred account for Visual Studio Live Share sign-in.
    "liveshare.account": null,

    // Preferred account provider for Visual Studio Live Share sign-in.
    "liveshare.accountProvider": null,

    // Allow guests to start and stop debugging sessions.
    "liveshare.allowGuestDebugControl": false,

    // Allow guests to run and terminate workspace tasks.
    "liveshare.allowGuestTaskControl": false,

    // Controls how to handle join requests from anonymous (read-only) guests.
    "liveshare.anonymousGuestApproval": "prompt",

    // Controls whether web servers are automatically shared, when started from the integrated terminal or well-known extensions.
    "liveshare.autoShareServers": true,

    // Controls whether terminals are automatically shared with guests (read-only).
    "liveshare.autoShareTerminals": true,

    // Controls whether to show the CodeLens for starting a collaboration session.
    "liveshare.codeLens": true,

    // Type of connection used for collaboration; the default (auto) mode prefers a direct connection, but may fallback to a cloud relay if the direct connection failed.
    "liveshare.connectionMode": "auto",

    // 
    "liveshare.diagnosticLogging": false,

    // List of debug adapter types to exclude when Live Share attempts to host a debug session.
    "liveshare.excludedDebugTypes": [],

    // Controls set of active features.
    "liveshare.features": "default",

    // Specifies how to respond to focus requests from other participants.
    "liveshare.focusBehavior": "accept",

    // Controls whether the host needs to explicitly approve guest requests to join collaboration sessions.
    "liveshare.guestApprovalRequired": false,

    // Increases the guest limit from 5 to 30.
    "liveshare.increasedGuestLimit": false,

    // Controls how the participant will join incoming shared debug sessions.
    "liveshare.joinDebugSessionOption": "Automatic",

    // Sets the number of seconds to wait before sending keep-alive messages in an idle session, used to detect abnormal network disconnection. Set to -1 to disable sending keep-alive messages.
    "liveshare.keepAliveInterval": 20,

    // Allow guests to run arbitrary commands via Code Actions (“Quick Fixes”) and CodeLens
    "liveshare.languages.allowGuestCommandControl": false,

    // Controls when to display a participant's name tag instead of just their cursor.
    "liveshare.nameTagVisibility": "Activity",

    // Controls whether to automatically open shared servers in your default browser.
    "liveshare.openSharedServers": true,

    // Specifies when to automatically populate your Git commit message with guest attribution (using the Git-co-author trailer).
    "liveshare.populateGitCoAuthors": "never",

    // Height of shared terminal window, characters.
    "liveshare.sharedTerminalHeight": 50,

    // Width of shared terminal window, characters.
    "liveshare.sharedTerminalWidth": 120,

    // Automatically share external files opened by the host during a collaboration session.
    "liveshare.shareExternalFiles": true,

    // Show or hide the Live Share status bar items.
    "liveshare.showInStatusBar": "always",

    // Controls visibility of the cursor and highlights for read-only users.
    "liveshare.showReadOnlyUsersInEditor": "whileFollowing",

    // Controls whether to show verbose notifications, such as when a guest joins and leaves a session.
    "liveshare.showVerboseNotifications": true,

    // 
    "vsliveshare.join.reload.workspaceId": null

  },
  {


    // npm bin name
    "npm.bin": "npm",

    // Look for 'package.json' files in these directories
    "npm.includeDirectories": [],

    // Run npm commands in a terminal, otherwise shows the output in the output panel
    "npm.runInTerminal": true,

    // Look for 'package.json' in the root directory of the workspace
    "npm.useRootDirectory": true,

    // Validate installed modules
    "npm.validate.enable": true

  },
  {


    // Controls how to respond when an audio call is started.
    "liveshare.audio.joinCallBehavior": "prompt",

    // Controls whether to automatically start an audio call whenever you share.
    "liveshare.audio.startCallOnShare": false

  },
  {


    // Include parentheses around a sole arrow function parameter
    "prettier.arrowParens": "avoid",

    // Controls the printing of spaces inside object literals
    "prettier.bracketSpacing": true,

    // A list of languages IDs to disable this extension on
    "prettier.disableLanguages": [
      "vue"
    ],

    // Specify the end of line used by prettier
    "prettier.endOfLine": "auto",

    // Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.
    "prettier.eslintIntegration": false,

    // Specify the global whitespace sensitivity for HTML files.
    //  Valid options: 
    // 'css' - Respect the default value of CSS display property. 
    // 'strict' - Whitespaces are considered sensitive. 
    // 'ignore' - Whitespaces are considered insensitive.
    "prettier.htmlWhitespaceSensitivity": "css",

    // Path to a .prettierignore or similar file
    "prettier.ignorePath": ".prettierignore",

    // If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
    "prettier.jsxBracketSameLine": false,

    // Use single quotes instead of double quotes in JSX
    "prettier.jsxSingleQuote": false,

    // Override the parser. You shouldn't have to change this setting.
    "prettier.parser": "babylon",

    // Fit code within this line limit
    "prettier.printWidth": 80,

    // (Markdown) wrap prose over multiple lines
    "prettier.proseWrap": "preserve",

    // Require a 'prettierconfig' to format
    "prettier.requireConfig": false,

    // Whether to add a semicolon at the end of every line
    "prettier.semi": true,

    // If true, will use single instead of double quotes
    "prettier.singleQuote": false,

    // Use 'prettier-stylelint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from stylelint rules.
    "prettier.stylelintIntegration": false,

    // Number of spaces it should use per tab
    "prettier.tabWidth": 2,

    // Controls the printing of trailing commas wherever possible.
    //  Valid options:
    //     'none' - No trailing commas
    //     'es5' - Trailing commas where valid in ES5 (objects, arrays, etc)
    //     'all' - Trailing commas wherever possible (function arguments)
    "prettier.trailingComma": "none",

    // Use 'prettier-tslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from tslint rules.
    "prettier.tslintIntegration": false,

    // Indent lines with tabs
    "prettier.useTabs": false

  },
  {


    // Attach command to use for Linux containers
    "docker.attachShellCommand.linuxContainer": "/bin/sh -c \"[ -e /bin/bash ] && /bin/bash || /bin/sh\"",

    // Attach command to use for Windows containers
    "docker.attachShellCommand.windowsContainer": "powershell",

    // Default registry and path when tagging an image
    "docker.defaultRegistryPath": "",

    // Run docker-compose with the --build argument, defaults to true
    "docker.dockerComposeBuild": true,

    // Run docker-compose with the --d (detached) argument, defaults to true
    "docker.dockerComposeDetached": true,

    // Explorer refresh interval, default is 1000ms
    "docker.explorerRefreshInterval": 1000,

    // Host to connect to (same as setting the DOCKER_HOST environment variable)
    "docker.host": "",

    // Build context PATH to pass to Docker build command
    "docker.imageBuildContextPath": "",

    // True causes the extension to attempt to find system-wide certificates, false indicates that the default Node.js trusted certificates list will be used. Use an object to get more fine-grained control.
    "docker.importCertificates": false,

    // Controls the diagnostic severity for the deprecated MAINTAINER instruction
    "docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

    // Controls the diagnostic severity for parser directives that are not written in lowercase
    "docker.languageserver.diagnostics.directiveCasing": "warning",

    // Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
    "docker.languageserver.diagnostics.emptyContinuationLine": "warning",

    // Controls the diagnostic severity for instructions that are not written in uppercase
    "docker.languageserver.diagnostics.instructionCasing": "warning",

    // Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
    "docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

    // Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
    "docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

    // Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
    "docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

    // Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
    "docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

    // Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
    "docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

    // Prompt for confirmation when running System Prune command
    "docker.promptOnSystemPrune": true,

    // Show or hide the Explorer
    "docker.showExplorer": true,

    // Truncate long Image and Container registry paths in the Explorer
    "docker.truncateLongRegistryPaths": false,

    // Maximum number of characters for long registry paths in the Explorer, including elipsis
    "docker.truncateMaxLength": 10

  },
  {


    // A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
    "beautify.config": null,

    // List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
    "beautify.ignore": [],

    // Link file types to the beautifier type
    "beautify.language": {
      "js": {
        "type": [
          "javascript",
          "json",
          "jsonc"
        ],
        "filename": [
          ".jshintrc",
          ".jsbeautifyrc"
        ]
      },
      "css": [
        "css",
        "scss"
      ],
      "html": [
        "htm",
        "html"
      ]
    }

  },
  {


    // Select an icon pack that enables specific icons.
    //  - angular: Icons for Angular.
    //  - angular_ngrx: Icons for Angular and ngrx.
    //  - react: Icons for React.
    //  - react_redux: Icons for React and Redux.
    //  - none: No icon pack enabled.
    "material-icon-theme.activeIconPack": "angular",

    // Set custom file icon associations.
    "material-icon-theme.files.associations": {},

    // Set custom folder icon associations.
    "material-icon-theme.folders.associations": {},

    // Change the color of the folder icons.
    "material-icon-theme.folders.color": "#90a4ae",

    // Set the type for the folder icons.
    //  - specific: Select specific folder icons.
    //  - classic: Select classic folder icons.
    //  - none: No folder icons.
    "material-icon-theme.folders.theme": "specific",

    // Hide explorer arrows before folder.
    "material-icon-theme.hidesExplorerArrows": false,

    // Set custom language icon associations.
    "material-icon-theme.languages.associations": {},

    // Change the opacity of the icons.
    "material-icon-theme.opacity": 1,

    // Show restart notification.
    "material-icon-theme.showReloadMessage": true,

    // Show the update message after each update.
    "material-icon-theme.showUpdateMessage": false,

    // Show the welcome message after first installation.
    "material-icon-theme.showWelcomeMessage": true

  },
  {


    // Controls whether auto detection of Gulp tasks is on or off. Default is on.
    "gulp.autoDetect": "on"

  },
  {


    // Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
    // 
    //  Examples : 
    // chrome --incognito --headless --remote-debugging-port=9222 
    //  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
    "liveServer.settings.AdvanceCustomBrowserCmdLine": null,

    // Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
    //  NOTE: You have to install 'Debugger for Chrome' 
    // If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
    // 
    //  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
    "liveServer.settings.ChromeDebuggingAttachment": false,

    // Specify custom browser settings for Live Server. 
    // By Default it will open your default favorite browser.
    "liveServer.settings.CustomBrowser": null,

    // To disable information pop up messages.
    "liveServer.settings.donotShowInfoMsg": false,

    // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
    "liveServer.settings.donotVerifyTags": false,

    // When set, serve this file (server root relative) for every 404 (useful for single-page applications)
    "liveServer.settings.file": "",

    // By Default Live Server inject CSS changes without full reloading of browser. You can change this behviour by making this setting as `true`
    "liveServer.settings.fullReload": false,

    // To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
    "liveServer.settings.host": "127.0.0.1",

    // Setup https configuration
    "liveServer.settings.https": {
      "enable": false,
      "cert": "",
      "key": "",
      "passphrase": ""
    },

    // To ignore specific file changes
    "liveServer.settings.ignoreFiles": [
      ".vscode/**",
      "**/*.scss",
      "**/*.sass",
      "**/*.ts"
    ],

    // Mount a directory to a route. Such as [['/components', './node_modules']]
    "liveServer.settings.mount": [],

    // This the entry point of server when you're in multiroot workspace
    "liveServer.settings.multiRootWorkspaceName": null,

    // If it is true live server will start without browser opened.
    "liveServer.settings.NoBrowser": false,

    // Set Custom Port Number of Live Server. Set 0 if you want random port.
    "liveServer.settings.port": 5500,

    // To Setup Proxy
    "liveServer.settings.proxy": {
      "enable": false,
      "baseUri": "/",
      "proxyUri": "http://127.0.0.1:80"
    },

    // Set Custom root of Live Server. 
    // To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
    // Example: /subfolder1/subfolder2
    "liveServer.settings.root": "/",

    // Change this to false if you don't want the button to show in the statusbar
    "liveServer.settings.showOnStatusbar": true,

    // Use local IP as host
    "liveServer.settings.useLocalIp": false,

    // You have to install a browser extension. That will be works for your dynamic pages (like PHP).
    "liveServer.settings.useWebExt": false,

    // Delay before live reloading. Value in milliseconds. Default is 100
    "liveServer.settings.wait": 100

  },
  {


    // Controls whether force push (with or without lease) is enabled.
    "git.allowForcePush": false,

    // Always show the Staged Changes resource group.
    "git.alwaysShowStagedChangesResourceGroup": false,

    // Controls the signoff flag for all commits.
    "git.alwaysSignOff": false,

    // When enabled, commits will automatically be fetched from the default remote of the current Git repository.
    "git.autofetch": false,

    // Whether auto refreshing is enabled.
    "git.autorefresh": true,

    // Configures when repositories should be automatically detected.
    //  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
    //  - false: Disable automatic repository scanning.
    //  - subFolders: Scan for subfolders of the currently opened folder.
    //  - openEditors: Scan for parent folders of open files.
    "git.autoRepositoryDetection": true,

    // A regular expression to validate new branch names.
    "git.branchValidationRegex": "",

    // The character to replace whitespace in new branch names.
    "git.branchWhitespaceChar": "-",

    // Controls what type of branches are listed when running `Checkout to...`.
    //  - all: Show all references.
    //  - local: Show only local branches.
    //  - tags: Show only tags.
    //  - remote: Show only remote branches.
    "git.checkoutType": "all",

    // Always confirm the creation of empty commits.
    "git.confirmEmptyCommits": true,

    // Controls whether to ask for confirmation before force-pushing.
    "git.confirmForcePush": true,

    // Confirm before synchronizing git repositories.
    "git.confirmSync": true,

    // Controls the git badge counter.
    //  - all: Count all changes.
    //  - tracked: Count only tracked changes.
    //  - off: Turn off counter.
    "git.countBadge": "all",

    // Controls whether Git contributes colors and badges to the explorer and the open editors view.
    "git.decorations.enabled": true,

    // The default location to clone a git repository.
    "git.defaultCloneDirectory": null,

    // Controls whether to automatically detect git submodules.
    "git.detectSubmodules": true,

    // Controls the limit of git submodules detected.
    "git.detectSubmodulesLimit": 10,

    // Enables commit signing with GPG.
    "git.enableCommitSigning": false,

    // Whether git is enabled.
    "git.enabled": true,

    // Commit all changes when there are no staged changes.
    "git.enableSmartCommit": false,

    // Fetch all branches when pulling or just the current one.
    "git.fetchOnPull": false,

    // List of git repositories to ignore.
    "git.ignoredRepositories": [],

    // Ignores the legacy Git warning.
    "git.ignoreLegacyWarning": false,

    // Ignores the warning when there are too many changes in a repository.
    "git.ignoreLimitWarning": false,

    // Ignores the warning when Git is missing.
    "git.ignoreMissingGitWarning": false,

    // Controls when to show commit message input validation.
    "git.inputValidation": "warn",

    // Controls the commit message length threshold for showing a warning.
    "git.inputValidationLength": 72,

    // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
    "git.openDiffOnClick": true,

    // Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows).
    "git.path": null,

    // Runs a git command after a successful commit.
    //  - none: Don't run any command after a commit.
    //  - push: Run 'Git Push' after a successful commit.
    //  - sync: Run 'Git Sync' after a successful commit.
    "git.postCommitCommand": "none",

    // Controls whether Git should check for unsaved files before committing.
    "git.promptToSaveFilesBeforeCommit": true,

    // Force git to use rebase when running the sync command.
    "git.rebaseWhenSync": false,

    // List of paths to search for git repositories in.
    "git.scanRepositories": [],

    // Controls whether to show an inline Open File action in the Git changes view.
    "git.showInlineOpenFileAction": true,

    // Controls whether git actions should show progress.
    "git.showProgress": true,

    // Controls whether to show a notification when a push is successful.
    "git.showPushSuccessNotification": false,

    // Controls whether force pushing uses the safer force-with-lease variant.
    "git.useForcePushWithLease": true

  },
  {


    // This setting will let you change the default file icon for dark themes.
    "vsicons.associations.fileDefault.file": null,

    // This setting will let you change the default file icon for light themes.
    "vsicons.associations.fileDefault.file_light": null,

    // These custom associations will override the file icon associations defined by default.
    "vsicons.associations.files": [],

    // This setting will let you change the default folder icon for dark themes.
    "vsicons.associations.folderDefault.folder": null,

    // This setting will let you change the default folder icon for light themes.
    "vsicons.associations.folderDefault.folder_light": null,

    // This setting will let you change the default root folder icon for dark themes.
    "vsicons.associations.folderDefault.root_folder": null,

    // This setting will let you change the default root folder icon for light themes.
    "vsicons.associations.folderDefault.root_folder_light": null,

    // These custom associations will override the folder icon associations defined by default.
    "vsicons.associations.folders": [],

    // The physical path to the parent folder where the custom icons folder resides on your local machine.
    "vsicons.customIconFolderPath": "",

    // If set to true, when manually changing the configurations, the 'restart' message won't be shown.
    "vsicons.dontShowConfigManuallyChangedMessage": false,

    // If set to true, the new version message won't be shown anymore.
    "vsicons.dontShowNewVersionMessage": false,

    // If set to true, the extension will match some of the common Angular patterns.
    "vsicons.presets.angular": false,

    // If set to true, all folders will have the default folder icon.
    "vsicons.presets.foldersAllDefaultIcon": false,

    // If set to true, the extension will hide the folder arrows in the 'Explorer'.
    "vsicons.presets.hideExplorerArrows": false,

    // If set to true, all folders will be hidden.
    "vsicons.presets.hideFolders": false,

    // If set to true, the extension will use the official JS icon.
    "vsicons.presets.jsOfficial": false,

    // If set to true, the extension will use the official JSON icon.
    "vsicons.presets.jsonOfficial": false,

    // If set to true, the extension will use the official TS icon.
    "vsicons.presets.tsOfficial": false,

    // If set to true, the extension will restart automatically on project detection.
    "vsicons.projectDetection.autoReload": false,

    // If set to true, the extension will disable the project detection.
    "vsicons.projectDetection.disableDetect": false

  },
  {


    // Automatically attach node debugger when node.js was launched in debug mode from integrated terminal.
    //  - disabled: Auto attach is disabled and not shown in status bar.
    //  - on: Auto attach is active.
    //  - off: Auto attach is inactive.
    "debug.node.autoAttach": "disabled"

  },
  {


    // Current accent color selected
    "materialTheme.accent": "Blue",

    // Enable/disable auto-apply of Material Theme icons with window reload when needed
    "materialTheme.autoApplyIcons": false,

    // Useful when autoApplyIcons is false and you want to be asked to reload the window when needed
    "materialTheme.showReloadNotification": true

  },
  {


    // ESLint parameters
    "maxlint.eslint": "",

    // Enable ESLint
    "maxlint.eslint_": true,

    // Lebab parameters
    "maxlint.lebab": "-t arrow,multi-var",

    // Enable lebab
    "maxlint.lebab_": true,

    // Prettier parameters
    "maxlint.prettier": "--arrow-parens avoid --print-width 120",

    // Enable Prettier
    "maxlint.prettier_": true

  },
  {


    // Which bundle size to display
    "importCost.bundleSizeDecoration": "both",

    // Enable debug logging
    "importCost.debug": false,

    // File extensions to be parsed by the Javascript parser
    "importCost.javascriptExtensions": [
      "\\.jsx?$"
    ],

    // Decoration color for large packages
    "importCost.largePackageColor": "#d44e40",

    // Decoration color for medium packages
    "importCost.mediumPackageColor": "#7cc36e",

    // Upper size limit, in KB, that will count a package as a medium package
    "importCost.mediumPackageSize": 100,

    // Display the 'calculating' decoration when starting to calculate the size
    "importCost.showCalculatingDecoration": true,

    // Decoration color for small packages
    "importCost.smallPackageColor": "#7cc36e",

    // Upper size limit, in KB, that will count a package as a small package
    "importCost.smallPackageSize": 50,

    // Size calculation timeout in milliseconds (requires restart)
    "importCost.timeout": 10000,

    // File extensions to be parsed by the Typescript parser
    "importCost.typescriptExtensions": [
      "\\.tsx?$"
    ]

  },
  {


    // Active indentation guides rendering color for dark themes.
    "guides.active.color.dark": "rgba(120, 60, 60, 0.75)",

    // Active indentation guides rendering color for light themes.
    "guides.active.color.light": "rgba(200, 100, 100, 0.75)",

    // Enable active indentation guides in addition to normal indentation guides.
    "guides.active.enabled": true,

    // Expand active indentation guides on the bracket's line.
    "guides.active.expandBrackets": true,

    // Shift active indentations by a level. This will also render an extra indentation guide.
    "guides.active.extraIndent": false,

    // Enable active indentation region indicator in the gutter area in addition to normal indentation guides.
    "guides.active.gutter": false,

    // Hide active indentation guides in selections.
    "guides.active.hideOnSelection": true,

    // Active indentation guides rendering style.
    "guides.active.style": "solid",

    // Active indentation guides rendering width.
    "guides.active.width": 1,

    // Enable the extension.
    "guides.enabled": true,

    // Indentation background colors.
    "guides.indent.backgrounds": [],

    // Hide indentation background in selections.
    "guides.indent.hideBackgroundOnSelection": true,

    // Show start-of-line indentation guides.
    "guides.indent.showFirstIndentGuides": true,

    // Maximum rendering boundary based on current cursor position. Set to -1 for no limit. Use floating point between 0-1 to determine from document size instead.
    "guides.limit.maximum": 500,

    // Normal indentation guides rendering color for dark themes.
    "guides.normal.color.dark": "rgba(60, 60, 60, 0.75)",

    // Normal indentation guides rendering color for light themes.
    "guides.normal.color.light": "rgba(220, 220, 220, 0.75)",

    // Enable normal indentation guides.
    "guides.normal.enabled": true,

    // Hide normal indentation guides in selections.
    "guides.normal.hideOnSelection": true,

    // Normal indentation guides rendering style.
    "guides.normal.style": "solid",

    // Normal indentation guides rendering width.
    "guides.normal.width": 1,

    // Override default Visual Studio Code behaviours (such as indentation guides or rulers).
    "guides.overrideDefault": false,

    // Send anonymous usage statistics data to the developer.
    "guides.sendUsagesAndStats": true,

    // Stack indentation guides rendering color for dark themes.
    "guides.stack.color.dark": "rgba(80, 80, 80, 0.75)",

    // Stack indentation guides rendering color for light themes.
    "guides.stack.color.light": "rgba(180, 180, 180, 0.75)",

    // Enable stack indentation guides in addition to normal indentation guides.
    "guides.stack.enabled": true,

    // Hide stack indentation guides in selections.
    "guides.stack.hideOnSelection": true,

    // Stack indentation guides rendering style.
    "guides.stack.style": "solid",

    // Stack indentation guides rendering width.
    "guides.stack.width": 1,

    // Time duration between each guide lines update (in seconds).
    "guides.updateDelay": 0.1

  },
  {


    // Ask gist name upon creating. Helps you to identify the gist if you have multiple gists.
    "sync.askGistName": false,

    // Set it true to Auto Download the settings on code start. [Code Restart Required]
    "sync.autoDownload": false,

    // Set it true to Auto Upload on the settings change. [Code Restart Required]
    "sync.autoUpload": false,

    // Set it to true if you want to download the settings even when you have the latest settings.
    "sync.forceDownload": false,

    // GitHub GIST ID for Settings Sync.
    "sync.gist": "",

    // When set to true, will show the result in status bar instead of summary page.
    "sync.quietSync": false,

    // Set it to false if you dont want to remove extensions while downloading.
    "sync.removeExtensions": true,

    // Set it to false if you dont want to upload / download the extensions.
    "sync.syncExtensions": true

  },
  {


    // Specifies whether column headers in CSV files are capitalized.
    "csv-preview.capitalizeHeaders": true,

    // Specifies the character used to mark comment lines in CSV files.
    "csv-preview.commentCharacter": "#",

    // Specifies whether to format numeric values in CSV files, or to treat all values as strings.
    "csv-preview.formatValues": true,

    // Specifies whether the first row in a CSV file represents column headers.
    "csv-preview.hasHeaders": true,

    // Specifies whether to display line numbers for CSV files.
    "csv-preview.lineNumbers": false,

    // Specifies a .NET-style format string used to format numeric columns in CSV files.
    "csv-preview.numberFormat": "g2",

    // Specifies whether text piped to stdin is automatically opened as a CSV preview.
    "csv-preview.openStdin": false,

    // Specifies the optional character used to surround individual values in a CSV file.
    "csv-preview.quoteMark": "\"",

    // Specifies whether columns are automatically resized to fit the data for CSV files.
    "csv-preview.resizeColumns": "none",

    // Specifies the separator used in a CSV file (normally , but also ; is common).
    "csv-preview.separator": ",",

    // Specifies whether lines that begin with the comment character should be omitted from the CSV preview.
    "csv-preview.skipComments": false,

    // Specifies the Wijmo theme used to style the preview grid.
    "csv-preview.theme": "cleandark"

  },
  {


    // Uses the legacy module resolving.
    "eslint._legacyModuleResolve": false,

    // Always show the ESlint status bar item.
    "eslint.alwaysShowStatus": false,

    // Turns auto fix on save on or off.
    "eslint.autoFixOnSave": false,

    // 
    "eslint.codeAction.disableRuleComment": {
      "enable": true,
      "location": "newLine"
    },

    // 
    "eslint.codeAction.showDocumentation": {
      "enable": false,
    },

    // Controls whether eslint is enabled for JavaScript files or not.
    "eslint.enable": true,

    // A path added to NODE_PATH when resolving the eslint module.
    "eslint.nodePath": "‪C:/Program Files/nodejs/node.exe",

    // The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).
    "eslint.options": {},

    // The package manager you use to install node modules.
    "eslint.packageManager": "npm",

    // Controls whether a task for linting the whole workspace will be available.
    "eslint.provideLintTask": false,

    // Run the linter on save (onSave) or on type (onType)
    "eslint.run": "onType",

    // The location of the node binary to run ESLint under.
    "eslint.runtime": null,

    // Traces the communication between VSCode and the eslint linter service.
    "eslint.trace.server": "off",

    // An array of language ids which should be validated by ESLint
    "eslint.validate": [
      "javascript",
      "javascriptreact"
    ],

    // 
    "eslint.workingDirectories": []

  },
  {
    "mongoRunner": {
      "connections": [{
          "url": "mongodb://localhost:27017"
        },
        {
          "url": "mongodb://localhost:27018/test"
        }
      ]
    }
  },
  {


    // server to connect to
    "mongoShell.host": "",

    // path to mongo shell executable
    "mongoShell.path": "C:\\MongoDB\\Server\\3.2\\bin\\mongo.exe",

    // port to connect to
    "mongoShell.port": "",

    // be less chatty
    "mongoShell.quiet": false,

    // username for authentication
    "mongoShell.username": "",

    // increase verbosity
    "mongoShell.verbose": false

  },
  {


    // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
    "merge-conflict.autoNavigateNextConflict.enabled": false,

    // Create a Code Lens for merge conflict blocks within editor.
    "merge-conflict.codeLens.enabled": true,

    // Create decorators for merge conflict blocks within editor.
    "merge-conflict.decorators.enabled": true

  },
  {


    // Relative path to node_modules folder.
    "search-node-modules.path": "node_modules",

    // Default to folder of last opened file when searching.
    "search-node-modules.useLastFolder": false

  },
  {

    // Path to the Mongo shell executable
    "mongo.shell.path": null,

    // Show or hide the Mongo Explorer
    "mongo.showExplorer": true,

  },
  {
    // Complete connection configuration for your MongoDB.
    "mongoRunner": {
      "connections": [{
          "url": "mongodb://localhost:27017"
        },
        {
          "url": "mongodb://localhost:27018/test"
        }
      ]
    }
  }
}